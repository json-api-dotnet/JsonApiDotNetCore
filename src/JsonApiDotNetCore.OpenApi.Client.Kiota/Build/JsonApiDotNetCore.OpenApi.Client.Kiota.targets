<!-- Loosely based on https://github.com/kimbell/Kiota.Testing, related to https://github.com/microsoft/kiota/issues/3005 -->
<Project InitialTargets="FailTheBuild">
  <Target Name="FailTheBuild">
    <Error Text="This package is no longer being maintained on the GitHub feed. Please use the version from nuget.org." />
  </Target>

  <UsingTask TaskName="KiotaPatchGeneratedCodeFiles" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <StartDirectory ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Code Type="Class" Language="cs">
        <![CDATA[
        using System;
        using System.IO;
        using System.Text.RegularExpressions;
        using Microsoft.Build.Framework;
        using Microsoft.Build.Utilities;

        public sealed class KiotaPatchGeneratedCodeFiles : Task
        {
            private static readonly Regex HeaderRegex = new(@"// <auto-generated/>(?:\r\n|\n|\r)(#pragma|using)", RegexOptions.Singleline | RegexOptions.Compiled);
            private static readonly Regex NullableRegex = new(@"(?s)#if NETSTANDARD2_1_OR_GREATER .*?(?:\r\n|\n|\r)#nullable enable(?:\r\n|\n|\r)(?<ifBody>.*?)(?:\r\n|\n|\r)#nullable restore(?:\r\n|\n|\r)#else(?:\r\n|\n|\r)(?<elseBody>.*?)(?:\r\n|\n|\r)#endif", RegexOptions.Singleline | RegexOptions.Compiled);
            private static readonly Regex LineBreaksRegex = new(@"}(?:\r\n|\n|\r)(?<lineIndent>[ ]+/// <summary>)", RegexOptions.Singleline | RegexOptions.Compiled);

            public string StartDirectory { get; set; }

            public override bool Execute()
            {
                string absoluteStartDirectory = Path.GetFullPath(StartDirectory);
                Log.LogMessage(MessageImportance.High, $"Patching kiota output files in {absoluteStartDirectory}");

                foreach (string path in Directory.GetFiles(absoluteStartDirectory, "*.cs", SearchOption.AllDirectories))
                {
                    string content = File.ReadAllText(path);
                    content = HeaderRegex.Replace(content, $"// <auto-generated/>{Environment.NewLine}#nullable enable{Environment.NewLine}#pragma warning disable CS8625{Environment.NewLine}$1");
                    content = NullableRegex.Replace(content, "$1");
                    content = LineBreaksRegex.Replace(content, $"}}{Environment.NewLine}{Environment.NewLine}$1");

                    File.WriteAllText(path, content);
                    Log.LogMessage(MessageImportance.Normal, $"Patched file: {path}");
                }

                return true;
            }
        }
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <!-- Restore local tools -->
  <Target Name="_KiotaRestoreTools" Condition="'$(KiotaAutoRestoreTools)' == 'true'">
    <Exec Command="dotnet tool restore" />
  </Target>

  <!-- Build the arguments value based on the other values. This is then used by the actual CLI -->
  <Target Name="_KiotaBuildArguments">
    <ItemGroup>
      <KiotaReference Condition="'%(Identity)' != ''">
        <Arguments>%(Arguments) --openapi %(Identity)</Arguments>
      </KiotaReference>
      <KiotaReference Condition="'%(Language)' != ''">
        <Arguments>%(Arguments) --language %(Language)</Arguments>
      </KiotaReference>
      <KiotaReference Condition="'%(Language)' == ''">
        <Arguments>%(Arguments) --language csharp</Arguments>
      </KiotaReference>
      <KiotaReference Condition="'%(ClassName)' != ''">
        <Arguments>%(Arguments) --class-name %(ClassName)</Arguments>
      </KiotaReference>
      <KiotaReference Condition="'%(NamespaceName)' != ''">
        <Arguments>%(Arguments) --namespace-name %(NamespaceName)</Arguments>
      </KiotaReference>
      <KiotaReference Condition="'%(OutputPath)' != ''">
        <Arguments>%(Arguments) --output %(OutputPath)</Arguments>
        <_NonEmptyOutputPath>%(OutputPath)</_NonEmptyOutputPath>
      </KiotaReference>
      <KiotaReference Condition="'%(OutputPath)' == ''">
        <_NonEmptyOutputPath>./output</_NonEmptyOutputPath>
      </KiotaReference>
      <KiotaReference Condition="'%(LogLevel)' != ''">
        <Arguments>%(Arguments) --log-level %(LogLevel)</Arguments>
      </KiotaReference>
      <KiotaReference Condition="'%(BackingStore)' == 'true'">
        <Arguments>%(Arguments) --backing-store</Arguments>
      </KiotaReference>
      <KiotaReference Condition="'%(ExcludeBackwardCompatible)' == 'true'">
        <Arguments>%(Arguments) --exclude-backward-compatible</Arguments>
      </KiotaReference>
      <KiotaReference Condition="'%(AdditionalData)' != ''">
        <Arguments>%(Arguments) --additional-data %(AdditionalData)</Arguments>
      </KiotaReference>
      <KiotaReference Condition="'%(Serializer)' != ''">
        <Arguments>%(Arguments) --serializer %(Serializer)</Arguments>
      </KiotaReference>
      <KiotaReference Condition="'%(Deserializer)' != ''">
        <Arguments>%(Arguments) --deserializer %(Deserializer)</Arguments>
      </KiotaReference>
      <KiotaReference Condition="'%(CleanOutput)' == 'true'">
        <Arguments>%(Arguments) --clean-output</Arguments>
      </KiotaReference>
      <KiotaReference Condition="'%(ClearCache)' == 'true'">
        <Arguments>%(Arguments) --clear-cache</Arguments>
      </KiotaReference>
      <KiotaReference Condition="'%(MimeTypes)' != ''">
        <Arguments>%(Arguments) --structured-mime-types %(MimeTypes)</Arguments>
      </KiotaReference>
      <KiotaReference Condition="'%(IncludePath)' != ''">
        <Arguments>%(Arguments) --include-path %(IncludePath)</Arguments>
      </KiotaReference>
      <KiotaReference Condition="'%(ExcludePath)' != ''">
        <Arguments>%(Arguments) --exclude-path %(ExcludePath)</Arguments>
      </KiotaReference>
      <KiotaReference Condition="'%(DisableValidationRules)' != ''">
        <Arguments>%(Arguments) --disable-validation-rules %(DisableValidationRules)</Arguments>
      </KiotaReference>
      <KiotaReference Condition="'%(DisableSslValidation)' == 'true'">
        <Arguments>%(Arguments) --disable-ssl-validation</Arguments>
      </KiotaReference>
      <KiotaReference Condition="'%(TypeAccessModifier)' != ''">
        <Arguments>%(Arguments) --type-access-modifier %(TypeAccessModifier)</Arguments>
      </KiotaReference>
      <KiotaReference Condition="'%(ExtraArguments)' != ''">
        <Arguments>%(Arguments) %(ExtraArguments)</Arguments>
      </KiotaReference>
    </ItemGroup>
  </Target>

  <!-- Exclude **/*.cs from output directory upfront, so that MSBuild properly refreshes if .cs files appear/disappear when openapi.json file changed -->
  <Target Name="_KiotaExcludeGeneratedCode" Condition="'$(DesignTimeBuild)' != 'true' And '$(BuildingProject)' == 'true'"
    DependsOnTargets="_KiotaBuildArguments">
    <ItemGroup>
      <_WildcardGroup Include="%2A%2A/%2A.cs">
        <GeneratedCodeDirectory>%(KiotaReference._NonEmptyOutputPath)</GeneratedCodeDirectory>
      </_WildcardGroup>
    </ItemGroup>

    <CreateItem Include="@(_WildcardGroup->'%(GeneratedCodeDirectory)/%(Identity)')">
      <Output TaskParameter="Include" ItemName="_FilesToExcludeGroup" />
    </CreateItem>

    <ItemGroup>
      <_RelativeExcludePathGroup Include="@(_FilesToExcludeGroup)" Condition="'@(_FilesToExcludeGroup)' != ''">
        <!-- Ensure that an output directory such as ./GeneratedCode gets normalized -->
        <RelativePath>$([MSBuild]::MakeRelative($(MSBuildProjectDirectory), %(_FilesToExcludeGroup.FullPath)))</RelativePath>
      </_RelativeExcludePathGroup>
    </ItemGroup>

    <ItemGroup>
      <Compile Remove="%(_RelativeExcludePathGroup.RelativePath)" />
    </ItemGroup>
  </Target>

  <!-- Include **/*.cs from output directory afterward, so that MSBuild properly refreshes if .cs files appear/disappear when openapi.json file changed -->
  <Target Name="_KiotaIncludeGeneratedCode" Condition="'$(DesignTimeBuild)' != 'true' And '$(BuildingProject)' == 'true'" DependsOnTargets="_KiotaRunTool"
    BeforeTargets="BeforeCompile;CoreCompile">
    <ItemGroup>
      <_WildcardGroup Include="%2A%2A/%2A.cs">
        <GeneratedCodeDirectory>%(KiotaReference._NonEmptyOutputPath)</GeneratedCodeDirectory>
      </_WildcardGroup>
    </ItemGroup>

    <CreateItem Include="@(_WildcardGroup->'%(GeneratedCodeDirectory)/%(Identity)')">
      <Output TaskParameter="Include" ItemName="_FilesToIncludeGroup" />
    </CreateItem>

    <ItemGroup>
      <_RelativeIncludePathGroup Include="@(_FilesToIncludeGroup)">
        <!-- Ensure that an output directory such as ./GeneratedCode gets normalized -->
        <RelativePath>$([MSBuild]::MakeRelative($(MSBuildProjectDirectory), %(_FilesToIncludeGroup.FullPath)))</RelativePath>
      </_RelativeIncludePathGroup>
    </ItemGroup>

    <ItemGroup>
      <Compile Include="%(_RelativeIncludePathGroup.RelativePath)" />
    </ItemGroup>
  </Target>

  <Target Name="_KiotaRunTool" Condition="'$(DesignTimeBuild)' != 'true' And '$(BuildingProject)' == 'true'"
    DependsOnTargets="_KiotaRestoreTools;_KiotaBuildArguments;_KiotaExcludeGeneratedCode">
    <!-- Run the kiota generate command, as global or local tool -->
    <PropertyGroup>
      <_KiotaCommand Condition="'$(KiotaAutoRestoreTools)' == 'true'">dotnet kiota generate</_KiotaCommand>
      <_KiotaCommand Condition="'$(KiotaAutoRestoreTools)' != 'true'">kiota generate</_KiotaCommand>
    </PropertyGroup>
    <Message Importance="High" Text="$(_KiotaCommand) %(KiotaReference.Arguments)" />
    <Exec Command="$(_KiotaCommand) %(KiotaReference.Arguments)" EnvironmentVariables="KIOTA_TUTORIAL_ENABLED=false;KIOTA_OFFLINE_ENABLED=true" />

    <!-- Post-process output files -->
    <KiotaPatchGeneratedCodeFiles StartDirectory="%(KiotaReference.OutputPath)" />
  </Target>
</Project>
