using System.Text;

namespace JsonApiDotNetCore.SourceGenerators;

/// <summary>
/// Writes the source code for an ASP.NET controller for a JSON:API resource.
/// </summary>
internal sealed class SourceCodeWriter
{
    private const int SpacesPerIndent = 4;

    private static readonly Dictionary<int, string> IndentTable = new()
    {
        [0] = string.Empty,
        [1] = new string(' ', 1 * SpacesPerIndent),
        [2] = new string(' ', 2 * SpacesPerIndent),
        [3] = new string(' ', 3 * SpacesPerIndent)
    };

    private static readonly Dictionary<JsonApiEndpointsCopy, (string ServiceName, string ParameterName)> AggregateEndpointToServiceNameMap = new()
    {
        [JsonApiEndpointsCopy.All] = ("IResourceService", "resourceService"),
        [JsonApiEndpointsCopy.Query] = ("IResourceQueryService", "queryService"),
        [JsonApiEndpointsCopy.Command] = ("IResourceCommandService", "commandService")
    };

    private static readonly Dictionary<JsonApiEndpointsCopy, (string ServiceName, string ParameterName)> EndpointToServiceNameMap = new()
    {
        [JsonApiEndpointsCopy.GetCollection] = ("IGetAllService", "getAll"),
        [JsonApiEndpointsCopy.GetSingle] = ("IGetByIdService", "getById"),
        [JsonApiEndpointsCopy.GetSecondary] = ("IGetSecondaryService", "getSecondary"),
        [JsonApiEndpointsCopy.GetRelationship] = ("IGetRelationshipService", "getRelationship"),
        [JsonApiEndpointsCopy.Post] = ("ICreateService", "create"),
        [JsonApiEndpointsCopy.PostRelationship] = ("IAddToRelationshipService", "addToRelationship"),
        [JsonApiEndpointsCopy.Patch] = ("IUpdateService", "update"),
        [JsonApiEndpointsCopy.PatchRelationship] = ("ISetRelationshipService", "setRelationship"),
        [JsonApiEndpointsCopy.Delete] = ("IDeleteService", "delete"),
        [JsonApiEndpointsCopy.DeleteRelationship] = ("IRemoveFromRelationshipService", "removeFromRelationship")
    };

    private readonly StringBuilder _sourceBuilder = new();
    private int _depth;

    public string Write(in FullControllerInfo fullController)
    {
        _sourceBuilder.Clear();
        _depth = 0;

        WriteAutoGeneratedComment();

        if (fullController.CoreController.WriteNullableEnable)
        {
            WriteNullableEnable();
        }

        WriteNamespaceImports(in fullController);

        WriteNamespaceDeclaration(fullController.ControllerType.Namespace);

        WriteOpenClassDeclaration(in fullController);
        _depth++;

        WriteConstructor(in fullController);

        _depth--;
        WriteCloseCurly();

        return _sourceBuilder.ToString();
    }

    private void WriteAutoGeneratedComment()
    {
        _sourceBuilder.AppendLine("// <auto-generated />");
        _sourceBuilder.AppendLine();
    }

    private void WriteNullableEnable()
    {
        _sourceBuilder.AppendLine("#nullable enable");
        _sourceBuilder.AppendLine();
    }

    private void WriteNamespaceImports(in FullControllerInfo fullController)
    {
        SortedSet<string> namespaces =
        [
            "JsonApiDotNetCore.Configuration",
            "JsonApiDotNetCore.Controllers",
            "JsonApiDotNetCore.Services"
        ];

        AddTypeToNamespaceImports(in fullController.LoggerFactoryInterface, namespaces);
        AddTypeToNamespaceImports(in fullController.CoreController.ResourceType, namespaces);
        AddTypeToNamespaceImports(in fullController.CoreController.IdType, namespaces);
        namespaces.Remove(fullController.ControllerType.Namespace);

        if (namespaces.Count > 0)
        {
            foreach (string @namespace in namespaces)
            {
                _sourceBuilder.AppendLine($"using {@namespace};");
            }

            _sourceBuilder.AppendLine();
        }
    }

    private static void AddTypeToNamespaceImports(in TypeInfo type, SortedSet<string> namespaces)
    {
        if (type.Namespace != string.Empty)
        {
            namespaces.Add(type.Namespace);
        }
    }

    private void WriteNamespaceDeclaration(string controllerNamespace)
    {
        if (controllerNamespace != string.Empty)
        {
            _sourceBuilder.AppendLine($"namespace {controllerNamespace};");
            _sourceBuilder.AppendLine();
        }
    }

    private void WriteOpenClassDeclaration(in FullControllerInfo fullController)
    {
        string baseClassName = GetControllerBaseClassName(in fullController.CoreController.Endpoints);

        WriteIndent();

        _sourceBuilder.AppendLine(
            $"public sealed partial class {fullController.ControllerType.TypeName} : {baseClassName}<{fullController.CoreController.ResourceType.TypeName}, {fullController.CoreController.IdType.TypeName}>");

        WriteOpenCurly();
    }

    private static string GetControllerBaseClassName(in JsonApiEndpointsCopy endpointsToGenerate)
    {
        return endpointsToGenerate switch
        {
            JsonApiEndpointsCopy.Query => "JsonApiQueryController",
            JsonApiEndpointsCopy.Command => "JsonApiCommandController",
            _ => "JsonApiController"
        };
    }

    private void WriteConstructor(in FullControllerInfo fullController)
    {
        WriteIndent();

        _sourceBuilder.AppendLine(
            $"public {fullController.ControllerType.TypeName}(IJsonApiOptions options, IResourceGraph resourceGraph, {fullController.LoggerFactoryInterface.TypeName} loggerFactory,");

        _depth++;

        if (AggregateEndpointToServiceNameMap.TryGetValue(fullController.CoreController.Endpoints, out (string ServiceName, string ParameterName) value))
        {
            WriteParameterListForShortConstructor(value.ServiceName, value.ParameterName, fullController.CoreController.ResourceType.TypeName,
                fullController.CoreController.IdType.TypeName);
        }
        else
        {
            WriteParameterListForLongConstructor(in fullController.CoreController.Endpoints, fullController.CoreController.ResourceType.TypeName,
                fullController.CoreController.IdType.TypeName);
        }

        _depth--;

        WriteOpenCurly();
        WriteCloseCurly();
    }

    private void WriteParameterListForShortConstructor(string serviceName, string parameterName, string resourceTypeName, string idTypeName)
    {
        WriteIndent();
        _sourceBuilder.AppendLine($"{serviceName}<{resourceTypeName}, {idTypeName}> {parameterName})");

        WriteIndent();
        _sourceBuilder.AppendLine($": base(options, resourceGraph, loggerFactory, {parameterName})");
    }

    private void WriteParameterListForLongConstructor(in JsonApiEndpointsCopy endpoints, string resourceTypeName, string idTypeName)
    {
        bool isFirstEntry = true;

        foreach ((JsonApiEndpointsCopy endpoint, (string serviceName, string parameterName)) in EndpointToServiceNameMap)
        {
            if ((endpoints & endpoint) == endpoint)
            {
                if (isFirstEntry)
                {
                    isFirstEntry = false;
                }
                else
                {
                    _sourceBuilder.AppendLine(Tokens.Comma);
                }

                WriteIndent();
                _sourceBuilder.Append($"{serviceName}<{resourceTypeName}, {idTypeName}> {parameterName}");
            }
        }

        _sourceBuilder.AppendLine(Tokens.CloseParen);

        WriteIndent();
        _sourceBuilder.AppendLine(": base(options, resourceGraph, loggerFactory,");

        isFirstEntry = true;
        _depth++;

        foreach ((JsonApiEndpointsCopy endpoint, (_, string parameterName)) in EndpointToServiceNameMap)
        {
            if ((endpoints & endpoint) == endpoint)
            {
                if (isFirstEntry)
                {
                    isFirstEntry = false;
                }
                else
                {
                    _sourceBuilder.AppendLine(Tokens.Comma);
                }

                WriteIndent();
                _sourceBuilder.Append($"{parameterName}: {parameterName}");
            }
        }

        _sourceBuilder.AppendLine(Tokens.CloseParen);
        _depth--;
    }

    private void WriteOpenCurly()
    {
        WriteIndent();
        _sourceBuilder.AppendLine(Tokens.OpenCurly);
    }

    private void WriteCloseCurly()
    {
        WriteIndent();
        _sourceBuilder.AppendLine(Tokens.CloseCurly);
    }

    private void WriteIndent()
    {
        // PERF: Reuse pre-calculated indents instead of allocating a new string each time.
        if (!IndentTable.TryGetValue(_depth, out string? indent))
        {
            throw new InvalidOperationException("Internal error: Insufficient entries in IndentTable.");
        }

        _sourceBuilder.Append(indent);
    }

#pragma warning disable AV1008 // Class should not be static
    private static class Tokens
    {
        public const string OpenCurly = "{";
        public const string CloseCurly = "}";
        public const string CloseParen = ")";
        public const string Comma = ",";
    }
#pragma warning restore AV1008 // Class should not be static
}
