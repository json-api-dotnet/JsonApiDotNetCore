// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions.Store;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace OpenApiKiotaClientExample.GeneratedCode.Models {
    public class TodoItemAttributesInResponse : IBackedModel, IParsable {
        /// <summary>Stores model information.</summary>
        public IBackingStore BackingStore { get; private set; }
        /// <summary>The createdAt property</summary>
        public DateTimeOffset? CreatedAt {
            get { return BackingStore?.Get<DateTimeOffset?>("createdAt"); }
            set { BackingStore?.Set("createdAt", value); }
        }
        /// <summary>The description property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description {
            get { return BackingStore?.Get<string?>("description"); }
            set { BackingStore?.Set("description", value); }
        }
#nullable restore
#else
        public string Description {
            get { return BackingStore?.Get<string>("description"); }
            set { BackingStore?.Set("description", value); }
        }
#endif
        /// <summary>The durationInHours property</summary>
        public long? DurationInHours {
            get { return BackingStore?.Get<long?>("durationInHours"); }
            set { BackingStore?.Set("durationInHours", value); }
        }
        /// <summary>The modifiedAt property</summary>
        public DateTimeOffset? ModifiedAt {
            get { return BackingStore?.Get<DateTimeOffset?>("modifiedAt"); }
            set { BackingStore?.Set("modifiedAt", value); }
        }
        /// <summary>The priority property</summary>
        public TodoItemPriority? Priority {
            get { return BackingStore?.Get<TodoItemPriority?>("priority"); }
            set { BackingStore?.Set("priority", value); }
        }
        /// <summary>
        /// Instantiates a new todoItemAttributesInResponse and sets the default values.
        /// </summary>
        public TodoItemAttributesInResponse() {
            BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static TodoItemAttributesInResponse CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new TodoItemAttributesInResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"createdAt", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                {"description", n => { Description = n.GetStringValue(); } },
                {"durationInHours", n => { DurationInHours = n.GetLongValue(); } },
                {"modifiedAt", n => { ModifiedAt = n.GetDateTimeOffsetValue(); } },
                {"priority", n => { Priority = n.GetEnumValue<TodoItemPriority>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("createdAt", CreatedAt);
            writer.WriteStringValue("description", Description);
            writer.WriteLongValue("durationInHours", DurationInHours);
            writer.WriteDateTimeOffsetValue("modifiedAt", ModifiedAt);
            writer.WriteEnumValue<TodoItemPriority>("priority", Priority);
        }
    }
}
