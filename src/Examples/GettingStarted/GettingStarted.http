@hostname=localhost
@port=14141

### Get all

GET http://{{hostname}}:{{port}}/api/people

### Get all with include

GET http://{{hostname}}:{{port}}/api/people?include=books

### Filter inside compound attribute chain

GET http://{{hostname}}:{{port}}/api/people?filter=startsWith(livingAddress.country.code,'N')

### Filter on collection attribute with "count" function

GET http://{{hostname}}:{{port}}/api/people?filter=greaterThan(count(namesOfChildren),'2')

### Filter on collection attribute with "has" function

GET http://{{hostname}}:{{port}}/api/people?filter=not(has(addresses))

### Filter on collection attribute with "has" function, taking nested filter

GET http://{{hostname}}:{{port}}/api/people?filter=has(addresses,equals(country.code,'ESP'))

### Filter on collection inside compound attribute chain (DOES NOT WORK)

GET http://{{hostname}}:{{port}}/api/people?filter[livingAddress.country.provinces]=equals(name,'Zuid-Holland')

### Sparse fieldset inside compound attribute chain (DOES NOT WORK)

GET http://{{hostname}}:{{port}}/api/people?fields[people]=livingAddress.street

### Sparse fieldset on compound type (DOES NOT WORK; how would we reference the 'address' type, which has no public name?)

GET http://{{hostname}}:{{port}}/api/people?fields[address]=country

### Patch string collection attribute

PATCH http://{{hostname}}:{{port}}/api/people/1
Content-Type: application/vnd.api+json

{
  "data": {
    "type": "people",
    "id": "1",
    "attributes": {
      "namesOfChildren": [
        "Mary",
        "Ann",
        null
      ]
    }
  }
}

### Patch int collection attribute

PATCH http://{{hostname}}:{{port}}/api/people/1
Content-Type: application/vnd.api+json

{
  "data": {
    "type": "people",
    "id": "1",
    "attributes": {
      "agesOfChildren": [
        15,
        25,
        null
      ]
    }
  }
}

### Patch members of compound attribute

PATCH http://{{hostname}}:{{port}}/api/people/1
Content-Type: application/vnd.api+json

{
  "data": {
    "type": "people",
    "id": "1",
    "attributes": {
      "livingAddress": {
        "country": {
          "code": "ITA",
          "displayName": "Italy"
        },
        "street": "OtherStreet"
      }
    }
  }
}

### Patch members of compound attribute, setting them to null

PATCH http://{{hostname}}:{{port}}/api/people/1
Content-Type: application/vnd.api+json

{
  "data": {
    "type": "people",
    "id": "1",
    "attributes": {
      "livingAddress": {
        "country": null,
        "street": null
      }
    }
  }
}

### Patch compound attribute to empty object (must be a no-op)

PATCH http://{{hostname}}:{{port}}/api/people/1
Content-Type: application/vnd.api+json

{
  "data": {
    "type": "people",
    "id": "1",
    "attributes": {
      "mailAddress": {}
    }
  }
}

### Patch compound attribute to null

PATCH http://{{hostname}}:{{port}}/api/people/1
Content-Type: application/vnd.api+json

{
  "data": {
    "type": "people",
    "id": "1",
    "attributes": {
      "mailAddress": null
    }
  }
}

### Patch compound nullable collection attribute (null element is blocked by EF Core)

PATCH http://{{hostname}}:{{port}}/api/people/1
Content-Type: application/vnd.api+json

{
  "data": {
    "type": "people",
    "id": "1",
    "attributes": {
      "addresses": [
        {
          "country": {
            "code": "DEU",
            "displayName": "Germany"
          }
        },
        {
          "street": "SomeStreet"
        },
        {}
      ]
    }
  }
}

### Patch relationships to null - SHOULD THIS FAIL OR NO-OP?

PATCH http://{{hostname}}:{{port}}/api/people/1
Content-Type: application/vnd.api+json

{
  "data": {
    "type": "people",
    "id": "1",
    "relationships": null
  }
}
