using System.Collections.Immutable;
using JetBrains.Annotations;

namespace JsonApiDotNetCore.Queries.Expressions;

/// <summary>
/// Represents a sorting, resulting from text such as:
/// <c>
/// lastName,-lastModifiedAt,count(children)
/// </c>
/// .
/// </summary>
[PublicAPI]
public class SortExpression : QueryExpression
{
    /// <summary>
    /// Indicates whether this expression was generated by JsonApiDotNetCore to ensure a deterministic order.
    /// </summary>
    internal bool IsAutoGenerated { get; }

    /// <summary>
    /// One or more elements to sort on.
    /// </summary>
    public IImmutableList<SortElementExpression> Elements { get; }

    public SortExpression(IImmutableList<SortElementExpression> elements)
        : this(elements, false)
    {
    }

    internal SortExpression(IImmutableList<SortElementExpression> elements, bool isAutoGenerated)
    {
        ArgumentGuard.NotNullNorEmpty(elements);

        Elements = elements;
        IsAutoGenerated = isAutoGenerated;
    }

    public override TResult Accept<TArgument, TResult>(QueryExpressionVisitor<TArgument, TResult> visitor, TArgument argument)
    {
        return visitor.VisitSort(this, argument);
    }

    public override string ToString()
    {
        return string.Join(',', Elements.Select(child => child.ToString()));
    }

    public override string ToFullString()
    {
        return $"{string.Join(',', Elements.Select(child => child.ToFullString()))}{(IsAutoGenerated ? " (auto-generated)" : "")}";
    }

    public override bool Equals(object? obj)
    {
        if (ReferenceEquals(this, obj))
        {
            return true;
        }

        if (obj is null || GetType() != obj.GetType())
        {
            return false;
        }

        var other = (SortExpression)obj;

        return IsAutoGenerated == other.IsAutoGenerated && Elements.SequenceEqual(other.Elements);
    }

    public override int GetHashCode()
    {
        var hashCode = new HashCode();
        hashCode.Add(IsAutoGenerated);

        foreach (SortElementExpression element in Elements)
        {
            hashCode.Add(element);
        }

        return hashCode.ToHashCode();
    }
}
