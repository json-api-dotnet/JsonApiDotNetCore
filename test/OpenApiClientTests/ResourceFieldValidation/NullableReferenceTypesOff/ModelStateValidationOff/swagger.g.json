{
  "openapi": "3.0.1",
  "info": {
    "title": "OpenApiTests",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "http://localhost"
    }
  ],
  "paths": {
    "/resources": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves a collection of resources.",
        "operationId": "getResourceCollection",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "ETag identifying the version of the requested resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found resources, or an empty array if none were found.",
            "headers": {
              "ETag": {
                "description": "ETag identifying the version of the fetched resource.",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
              }
            },
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceCollectionResponseDocument"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "304": {
            "description": "The resource was not modified.",
            "headers": {
              "ETag": {
                "description": "ETag identifying the version of the fetched resource.",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves a collection of resources without returning them.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "headResourceCollection",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "ETag identifying the version of the requested resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "headers": {
              "ETag": {
                "description": "ETag identifying the version of the fetched resource.",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
              },
              "Content-Length": {
                "description": "Size of the response body in bytes",
                "required": true,
                "schema": {
                  "type": "integer"
                },
                "example": 891
              }
            }
          },
          "304": {
            "description": "The resource was not modified.",
            "headers": {
              "ETag": {
                "description": "ETag identifying the version of the fetched resource.",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          }
        }
      },
      "post": {
        "tags": [
          "resources"
        ],
        "summary": "Creates a new resource.",
        "operationId": "postResource",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          }
        ],
        "requestBody": {
          "description": "The attributes and relationships of the resource to create.",
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/resourcePostRequestDocument"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The resource was successfully created, which resulted in additional changes. The newly created resource is returned.",
            "headers": {
              "Location": {
                "description": "Location of the newly created resource.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resourcePrimaryResponseDocument"
                }
              }
            }
          },
          "204": {
            "description": "The resource was successfully created, which did not result in additional changes."
          },
          "400": {
            "description": "The query string is invalid or the request body is missing or malformed.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "403": {
            "description": "Client-generated IDs cannot be used at this endpoint.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "409": {
            "description": "A resource type in the request body is incompatible.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "422": {
            "description": "Validation of the request body failed.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      }
    },
    "/resources/{id}": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves an individual resource by its identifier.",
        "operationId": "getResource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the resource to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "ETag identifying the version of the requested resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found resource.",
            "headers": {
              "ETag": {
                "description": "ETag identifying the version of the fetched resource.",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
              }
            },
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resourcePrimaryResponseDocument"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The resource does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "304": {
            "description": "The resource was not modified.",
            "headers": {
              "ETag": {
                "description": "ETag identifying the version of the fetched resource.",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves an individual resource by its identifier without returning it.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "headResource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the resource to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "ETag identifying the version of the requested resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "headers": {
              "ETag": {
                "description": "ETag identifying the version of the fetched resource.",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
              },
              "Content-Length": {
                "description": "Size of the response body in bytes",
                "required": true,
                "schema": {
                  "type": "integer"
                },
                "example": 891
              }
            }
          },
          "304": {
            "description": "The resource was not modified.",
            "headers": {
              "ETag": {
                "description": "ETag identifying the version of the fetched resource.",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          },
          "404": {
            "description": "The resource does not exist."
          }
        }
      },
      "patch": {
        "tags": [
          "resources"
        ],
        "summary": "Updates an existing resource.",
        "operationId": "patchResource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the resource to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          }
        ],
        "requestBody": {
          "description": "The attributes and relationships of the resource to update. Omitted fields are left unchanged.",
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/resourcePatchRequestDocument"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The resource was successfully updated, which resulted in additional changes. The updated resource is returned.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/resourcePrimaryResponseDocument"
                }
              }
            }
          },
          "204": {
            "description": "The resource was successfully updated, which did not result in additional changes."
          },
          "400": {
            "description": "The query string is invalid or the request body is missing or malformed.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The resource or a related resource does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "409": {
            "description": "A resource type or identifier in the request body is incompatible.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "422": {
            "description": "Validation of the request body failed.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "resources"
        ],
        "summary": "Deletes an existing resource by its identifier.",
        "operationId": "deleteResource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the resource to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was successfully deleted."
          },
          "404": {
            "description": "The resource does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      }
    },
    "/resources/{id}/requiredToMany": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the related empties of an individual resource's requiredToMany relationship.",
        "operationId": "getResourceRequiredToMany",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the resource whose related empties to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "ETag identifying the version of the requested resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found empties, or an empty array if none were found.",
            "headers": {
              "ETag": {
                "description": "ETag identifying the version of the fetched resource.",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
              }
            },
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/emptyCollectionResponseDocument"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The resource does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "304": {
            "description": "The resource was not modified.",
            "headers": {
              "ETag": {
                "description": "ETag identifying the version of the fetched resource.",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the related empties of an individual resource's requiredToMany relationship without returning them.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "headResourceRequiredToMany",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the resource whose related empties to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "ETag identifying the version of the requested resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "headers": {
              "ETag": {
                "description": "ETag identifying the version of the fetched resource.",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
              },
              "Content-Length": {
                "description": "Size of the response body in bytes",
                "required": true,
                "schema": {
                  "type": "integer"
                },
                "example": 891
              }
            }
          },
          "304": {
            "description": "The resource was not modified.",
            "headers": {
              "ETag": {
                "description": "ETag identifying the version of the fetched resource.",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          },
          "404": {
            "description": "The resource does not exist."
          }
        }
      }
    },
    "/resources/{id}/relationships/requiredToMany": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the related empty identities of an individual resource's requiredToMany relationship.",
        "operationId": "getResourceRequiredToManyRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the resource whose related empty identities to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "ETag identifying the version of the requested resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found empty identities, or an empty array if none were found.",
            "headers": {
              "ETag": {
                "description": "ETag identifying the version of the fetched resource.",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
              }
            },
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/emptyIdentifierCollectionResponseDocument"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The resource does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "304": {
            "description": "The resource was not modified.",
            "headers": {
              "ETag": {
                "description": "ETag identifying the version of the fetched resource.",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the related empty identities of an individual resource's requiredToMany relationship without returning them.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "headResourceRequiredToManyRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the resource whose related empty identities to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "ETag identifying the version of the requested resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "headers": {
              "Content-Length": {
                "description": "Size of the response body in bytes",
                "required": true,
                "schema": {
                  "type": "integer"
                },
                "example": 891
              },
              "ETag": {
                "description": "ETag identifying the version of the fetched resource.",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
              }
            }
          },
          "304": {
            "description": "The resource was not modified.",
            "headers": {
              "ETag": {
                "description": "ETag identifying the version of the fetched resource.",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          },
          "404": {
            "description": "The resource does not exist."
          }
        }
      },
      "post": {
        "tags": [
          "resources"
        ],
        "summary": "Adds existing empties to the requiredToMany relationship of an individual resource.",
        "operationId": "postResourceRequiredToManyRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the resource to add empties to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The identities of the empties to add to the requiredToMany relationship.",
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/toManyEmptyInRequest"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The empties were successfully added, which did not result in additional changes."
          },
          "400": {
            "description": "The request body is missing or malformed.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The resource does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "409": {
            "description": "A resource type in the request body is incompatible.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "resources"
        ],
        "summary": "Assigns existing empties to the requiredToMany relationship of an individual resource.",
        "operationId": "patchResourceRequiredToManyRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the resource whose requiredToMany relationship to assign.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The identities of the empties to assign to the requiredToMany relationship, or an empty array to clear the relationship.",
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/toManyEmptyInRequest"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The requiredToMany relationship was successfully updated, which did not result in additional changes."
          },
          "400": {
            "description": "The request body is missing or malformed.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The resource does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "409": {
            "description": "A resource type in the request body is incompatible.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "resources"
        ],
        "summary": "Removes existing empties from the requiredToMany relationship of an individual resource.",
        "operationId": "deleteResourceRequiredToManyRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the resource to remove empties from.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The identities of the empties to remove from the requiredToMany relationship.",
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/toManyEmptyInRequest"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The empties were successfully removed, which did not result in additional changes."
          },
          "400": {
            "description": "The request body is missing or malformed.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The resource does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "409": {
            "description": "A resource type in the request body is incompatible.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      }
    },
    "/resources/{id}/requiredToOne": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the related empty of an individual resource's requiredToOne relationship.",
        "operationId": "getResourceRequiredToOne",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the resource whose related empty to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "ETag identifying the version of the requested resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found empty, or `null` if it was not found.",
            "headers": {
              "ETag": {
                "description": "ETag identifying the version of the fetched resource.",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
              }
            },
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/nullableEmptySecondaryResponseDocument"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The resource does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "304": {
            "description": "The resource was not modified.",
            "headers": {
              "ETag": {
                "description": "ETag identifying the version of the fetched resource.",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the related empty of an individual resource's requiredToOne relationship without returning it.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "headResourceRequiredToOne",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the resource whose related empty to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "ETag identifying the version of the requested resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "headers": {
              "ETag": {
                "description": "ETag identifying the version of the fetched resource.",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
              },
              "Content-Length": {
                "description": "Size of the response body in bytes",
                "required": true,
                "schema": {
                  "type": "integer"
                },
                "example": 891
              }
            }
          },
          "304": {
            "description": "The resource was not modified.",
            "headers": {
              "ETag": {
                "description": "ETag identifying the version of the fetched resource.",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          },
          "404": {
            "description": "The resource does not exist."
          }
        }
      }
    },
    "/resources/{id}/relationships/requiredToOne": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the related empty identity of an individual resource's requiredToOne relationship.",
        "operationId": "getResourceRequiredToOneRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the resource whose related empty identity to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "ETag identifying the version of the requested resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found empty identity, or `null` if it was not found.",
            "headers": {
              "ETag": {
                "description": "ETag identifying the version of the fetched resource.",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
              }
            },
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/nullableEmptyIdentifierResponseDocument"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The resource does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "304": {
            "description": "The resource was not modified.",
            "headers": {
              "ETag": {
                "description": "ETag identifying the version of the fetched resource.",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the related empty identity of an individual resource's requiredToOne relationship without returning it.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "headResourceRequiredToOneRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the resource whose related empty identity to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "ETag identifying the version of the requested resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "headers": {
              "Content-Length": {
                "description": "Size of the response body in bytes",
                "required": true,
                "schema": {
                  "type": "integer"
                },
                "example": 891
              },
              "ETag": {
                "description": "ETag identifying the version of the fetched resource.",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
              }
            }
          },
          "304": {
            "description": "The resource was not modified.",
            "headers": {
              "ETag": {
                "description": "ETag identifying the version of the fetched resource.",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          },
          "404": {
            "description": "The resource does not exist."
          }
        }
      },
      "patch": {
        "tags": [
          "resources"
        ],
        "summary": "Clears or assigns an existing empty to the requiredToOne relationship of an individual resource.",
        "operationId": "patchResourceRequiredToOneRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the resource whose requiredToOne relationship to assign or clear.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The identity of the empty to assign to the requiredToOne relationship, or `null` to clear the relationship.",
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/nullableToOneEmptyInRequest"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The requiredToOne relationship was successfully updated, which did not result in additional changes."
          },
          "400": {
            "description": "The request body is missing or malformed.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The resource does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "409": {
            "description": "A resource type in the request body is incompatible.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      }
    },
    "/resources/{id}/toMany": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the related empties of an individual resource's toMany relationship.",
        "operationId": "getResourceToMany",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the resource whose related empties to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "ETag identifying the version of the requested resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found empties, or an empty array if none were found.",
            "headers": {
              "ETag": {
                "description": "ETag identifying the version of the fetched resource.",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
              }
            },
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/emptyCollectionResponseDocument"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The resource does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "304": {
            "description": "The resource was not modified.",
            "headers": {
              "ETag": {
                "description": "ETag identifying the version of the fetched resource.",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the related empties of an individual resource's toMany relationship without returning them.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "headResourceToMany",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the resource whose related empties to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "ETag identifying the version of the requested resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "headers": {
              "ETag": {
                "description": "ETag identifying the version of the fetched resource.",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
              },
              "Content-Length": {
                "description": "Size of the response body in bytes",
                "required": true,
                "schema": {
                  "type": "integer"
                },
                "example": 891
              }
            }
          },
          "304": {
            "description": "The resource was not modified.",
            "headers": {
              "ETag": {
                "description": "ETag identifying the version of the fetched resource.",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          },
          "404": {
            "description": "The resource does not exist."
          }
        }
      }
    },
    "/resources/{id}/relationships/toMany": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the related empty identities of an individual resource's toMany relationship.",
        "operationId": "getResourceToManyRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the resource whose related empty identities to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "ETag identifying the version of the requested resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found empty identities, or an empty array if none were found.",
            "headers": {
              "ETag": {
                "description": "ETag identifying the version of the fetched resource.",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
              }
            },
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/emptyIdentifierCollectionResponseDocument"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The resource does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "304": {
            "description": "The resource was not modified.",
            "headers": {
              "ETag": {
                "description": "ETag identifying the version of the fetched resource.",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the related empty identities of an individual resource's toMany relationship without returning them.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "headResourceToManyRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the resource whose related empty identities to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "ETag identifying the version of the requested resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "headers": {
              "Content-Length": {
                "description": "Size of the response body in bytes",
                "required": true,
                "schema": {
                  "type": "integer"
                },
                "example": 891
              },
              "ETag": {
                "description": "ETag identifying the version of the fetched resource.",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
              }
            }
          },
          "304": {
            "description": "The resource was not modified.",
            "headers": {
              "ETag": {
                "description": "ETag identifying the version of the fetched resource.",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          },
          "404": {
            "description": "The resource does not exist."
          }
        }
      },
      "post": {
        "tags": [
          "resources"
        ],
        "summary": "Adds existing empties to the toMany relationship of an individual resource.",
        "operationId": "postResourceToManyRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the resource to add empties to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The identities of the empties to add to the toMany relationship.",
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/toManyEmptyInRequest"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The empties were successfully added, which did not result in additional changes."
          },
          "400": {
            "description": "The request body is missing or malformed.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The resource does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "409": {
            "description": "A resource type in the request body is incompatible.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "resources"
        ],
        "summary": "Assigns existing empties to the toMany relationship of an individual resource.",
        "operationId": "patchResourceToManyRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the resource whose toMany relationship to assign.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The identities of the empties to assign to the toMany relationship, or an empty array to clear the relationship.",
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/toManyEmptyInRequest"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The toMany relationship was successfully updated, which did not result in additional changes."
          },
          "400": {
            "description": "The request body is missing or malformed.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The resource does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "409": {
            "description": "A resource type in the request body is incompatible.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "resources"
        ],
        "summary": "Removes existing empties from the toMany relationship of an individual resource.",
        "operationId": "deleteResourceToManyRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the resource to remove empties from.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The identities of the empties to remove from the toMany relationship.",
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/toManyEmptyInRequest"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The empties were successfully removed, which did not result in additional changes."
          },
          "400": {
            "description": "The request body is missing or malformed.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The resource does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "409": {
            "description": "A resource type in the request body is incompatible.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      }
    },
    "/resources/{id}/toOne": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the related empty of an individual resource's toOne relationship.",
        "operationId": "getResourceToOne",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the resource whose related empty to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "ETag identifying the version of the requested resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found empty, or `null` if it was not found.",
            "headers": {
              "ETag": {
                "description": "ETag identifying the version of the fetched resource.",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
              }
            },
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/nullableEmptySecondaryResponseDocument"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The resource does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "304": {
            "description": "The resource was not modified.",
            "headers": {
              "ETag": {
                "description": "ETag identifying the version of the fetched resource.",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the related empty of an individual resource's toOne relationship without returning it.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "headResourceToOne",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the resource whose related empty to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "ETag identifying the version of the requested resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "headers": {
              "ETag": {
                "description": "ETag identifying the version of the fetched resource.",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
              },
              "Content-Length": {
                "description": "Size of the response body in bytes",
                "required": true,
                "schema": {
                  "type": "integer"
                },
                "example": 891
              }
            }
          },
          "304": {
            "description": "The resource was not modified.",
            "headers": {
              "ETag": {
                "description": "ETag identifying the version of the fetched resource.",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          },
          "404": {
            "description": "The resource does not exist."
          }
        }
      }
    },
    "/resources/{id}/relationships/toOne": {
      "get": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the related empty identity of an individual resource's toOne relationship.",
        "operationId": "getResourceToOneRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the resource whose related empty identity to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "ETag identifying the version of the requested resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found empty identity, or `null` if it was not found.",
            "headers": {
              "ETag": {
                "description": "ETag identifying the version of the fetched resource.",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
              }
            },
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/nullableEmptyIdentifierResponseDocument"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The resource does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "304": {
            "description": "The resource was not modified.",
            "headers": {
              "ETag": {
                "description": "ETag identifying the version of the fetched resource.",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "resources"
        ],
        "summary": "Retrieves the related empty identity of an individual resource's toOne relationship without returning it.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "headResourceToOneRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the resource whose related empty identity to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "ETag identifying the version of the requested resource.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "headers": {
              "Content-Length": {
                "description": "Size of the response body in bytes",
                "required": true,
                "schema": {
                  "type": "integer"
                },
                "example": 891
              },
              "ETag": {
                "description": "ETag identifying the version of the fetched resource.",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
              }
            }
          },
          "304": {
            "description": "The resource was not modified.",
            "headers": {
              "ETag": {
                "description": "ETag identifying the version of the fetched resource.",
                "required": true,
                "schema": {
                  "type": "string"
                },
                "example": "\"33a64df551425fcc55e4d42a148795d9f25f89d4\""
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          },
          "404": {
            "description": "The resource does not exist."
          }
        }
      },
      "patch": {
        "tags": [
          "resources"
        ],
        "summary": "Clears or assigns an existing empty to the toOne relationship of an individual resource.",
        "operationId": "patchResourceToOneRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the resource whose toOne relationship to assign or clear.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The identity of the empty to assign to the toOne relationship, or `null` to clear the relationship.",
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/nullableToOneEmptyInRequest"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The toOne relationship was successfully updated, which did not result in additional changes."
          },
          "400": {
            "description": "The request body is missing or malformed.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The resource does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "409": {
            "description": "A resource type in the request body is incompatible.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "dataInResponse": {
        "required": [
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "minLength": 1,
            "type": "string"
          },
          "id": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "empties": "#/components/schemas/emptyDataInResponse",
            "resources": "#/components/schemas/resourceDataInResponse"
          }
        },
        "x-abstract": true
      },
      "emptyCollectionResponseDocument": {
        "required": [
          "data",
          "links"
        ],
        "type": "object",
        "properties": {
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/linksInResourceCollectionDocument"
              }
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/emptyDataInResponse"
            }
          },
          "included": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dataInResponse"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "nullable": true
            }
          }
        },
        "additionalProperties": false
      },
      "emptyDataInResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/dataInResponse"
          },
          {
            "required": [
              "links"
            ],
            "type": "object",
            "properties": {
              "links": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/linksInResourceData"
                  }
                ]
              },
              "meta": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "nullable": true
                }
              }
            },
            "additionalProperties": false
          }
        ],
        "additionalProperties": false
      },
      "emptyIdentifier": {
        "required": [
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/emptyResourceType"
          },
          "id": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "emptyIdentifierCollectionResponseDocument": {
        "required": [
          "data",
          "links"
        ],
        "type": "object",
        "properties": {
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/linksInResourceIdentifierCollectionDocument"
              }
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/emptyIdentifier"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "nullable": true
            }
          }
        },
        "additionalProperties": false
      },
      "emptyResourceType": {
        "enum": [
          "empties"
        ],
        "type": "string",
        "additionalProperties": false
      },
      "errorLinks": {
        "type": "object",
        "properties": {
          "about": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "errorObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/errorLinks"
              }
            ],
            "nullable": true
          },
          "status": {
            "type": "string"
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/errorSource"
              }
            ],
            "nullable": true
          },
          "meta": {
            "type": "object",
            "additionalProperties": { },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "errorResponseDocument": {
        "required": [
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/errorObject"
            }
          }
        },
        "additionalProperties": false
      },
      "errorSource": {
        "type": "object",
        "properties": {
          "pointer": {
            "type": "string",
            "nullable": true
          },
          "parameter": {
            "type": "string",
            "nullable": true
          },
          "header": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "linksInRelationship": {
        "required": [
          "related",
          "self"
        ],
        "type": "object",
        "properties": {
          "self": {
            "minLength": 1,
            "type": "string"
          },
          "related": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "linksInResourceCollectionDocument": {
        "required": [
          "self"
        ],
        "type": "object",
        "properties": {
          "self": {
            "minLength": 1,
            "type": "string"
          },
          "describedby": {
            "type": "string"
          },
          "first": {
            "type": "string"
          },
          "last": {
            "type": "string"
          },
          "prev": {
            "type": "string"
          },
          "next": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "linksInResourceData": {
        "required": [
          "self"
        ],
        "type": "object",
        "properties": {
          "self": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "linksInResourceDocument": {
        "required": [
          "self"
        ],
        "type": "object",
        "properties": {
          "self": {
            "minLength": 1,
            "type": "string"
          },
          "describedby": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "linksInResourceIdentifierCollectionDocument": {
        "required": [
          "related",
          "self"
        ],
        "type": "object",
        "properties": {
          "self": {
            "minLength": 1,
            "type": "string"
          },
          "related": {
            "minLength": 1,
            "type": "string"
          },
          "describedby": {
            "type": "string"
          },
          "first": {
            "type": "string"
          },
          "last": {
            "type": "string"
          },
          "prev": {
            "type": "string"
          },
          "next": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "linksInResourceIdentifierDocument": {
        "required": [
          "related",
          "self"
        ],
        "type": "object",
        "properties": {
          "self": {
            "minLength": 1,
            "type": "string"
          },
          "related": {
            "minLength": 1,
            "type": "string"
          },
          "describedby": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "nullableEmptyIdentifierResponseDocument": {
        "required": [
          "data",
          "links"
        ],
        "type": "object",
        "properties": {
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/linksInResourceIdentifierDocument"
              }
            ]
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/emptyIdentifier"
              }
            ],
            "nullable": true
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "nullable": true
            }
          }
        },
        "additionalProperties": false
      },
      "nullableEmptySecondaryResponseDocument": {
        "required": [
          "data",
          "links"
        ],
        "type": "object",
        "properties": {
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/linksInResourceDocument"
              }
            ]
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/emptyDataInResponse"
              }
            ],
            "nullable": true
          },
          "included": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dataInResponse"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "nullable": true
            }
          }
        },
        "additionalProperties": false
      },
      "nullableToOneEmptyInRequest": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/emptyIdentifier"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "nullableToOneEmptyInResponse": {
        "required": [
          "links"
        ],
        "type": "object",
        "properties": {
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/linksInRelationship"
              }
            ]
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/emptyIdentifier"
              }
            ],
            "nullable": true
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "nullable": true
            }
          }
        },
        "additionalProperties": false
      },
      "resourceAttributesInPatchRequest": {
        "type": "object",
        "properties": {
          "referenceType": {
            "type": "string",
            "nullable": true
          },
          "requiredReferenceType": {
            "minLength": 1,
            "type": "string",
            "nullable": true
          },
          "valueType": {
            "type": "integer",
            "format": "int32"
          },
          "requiredValueType": {
            "type": "integer",
            "format": "int32"
          },
          "nullableValueType": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "requiredNullableValueType": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "resourceAttributesInPostRequest": {
        "required": [
          "requiredNullableValueType",
          "requiredReferenceType",
          "requiredValueType"
        ],
        "type": "object",
        "properties": {
          "referenceType": {
            "type": "string",
            "nullable": true
          },
          "requiredReferenceType": {
            "minLength": 1,
            "type": "string",
            "nullable": true
          },
          "valueType": {
            "type": "integer",
            "format": "int32"
          },
          "requiredValueType": {
            "type": "integer",
            "format": "int32"
          },
          "nullableValueType": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "requiredNullableValueType": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "resourceAttributesInResponse": {
        "type": "object",
        "properties": {
          "referenceType": {
            "type": "string",
            "nullable": true
          },
          "requiredReferenceType": {
            "minLength": 1,
            "type": "string",
            "nullable": true
          },
          "valueType": {
            "type": "integer",
            "format": "int32"
          },
          "requiredValueType": {
            "type": "integer",
            "format": "int32"
          },
          "nullableValueType": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "requiredNullableValueType": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "resourceCollectionResponseDocument": {
        "required": [
          "data",
          "links"
        ],
        "type": "object",
        "properties": {
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/linksInResourceCollectionDocument"
              }
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/resourceDataInResponse"
            }
          },
          "included": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dataInResponse"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "nullable": true
            }
          }
        },
        "additionalProperties": false
      },
      "resourceDataInPatchRequest": {
        "required": [
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/resourceResourceType"
          },
          "id": {
            "minLength": 1,
            "type": "string"
          },
          "attributes": {
            "allOf": [
              {
                "$ref": "#/components/schemas/resourceAttributesInPatchRequest"
              }
            ]
          },
          "relationships": {
            "allOf": [
              {
                "$ref": "#/components/schemas/resourceRelationshipsInPatchRequest"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "resourceDataInPostRequest": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/resourceResourceType"
          },
          "attributes": {
            "allOf": [
              {
                "$ref": "#/components/schemas/resourceAttributesInPostRequest"
              }
            ]
          },
          "relationships": {
            "allOf": [
              {
                "$ref": "#/components/schemas/resourceRelationshipsInPostRequest"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "resourceDataInResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/dataInResponse"
          },
          {
            "required": [
              "links"
            ],
            "type": "object",
            "properties": {
              "attributes": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/resourceAttributesInResponse"
                  }
                ]
              },
              "relationships": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/resourceRelationshipsInResponse"
                  }
                ]
              },
              "links": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/linksInResourceData"
                  }
                ]
              },
              "meta": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "nullable": true
                }
              }
            },
            "additionalProperties": false
          }
        ],
        "additionalProperties": false
      },
      "resourcePatchRequestDocument": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/resourceDataInPatchRequest"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "resourcePostRequestDocument": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/resourceDataInPostRequest"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "resourcePrimaryResponseDocument": {
        "required": [
          "data",
          "links"
        ],
        "type": "object",
        "properties": {
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/linksInResourceDocument"
              }
            ]
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/resourceDataInResponse"
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dataInResponse"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "nullable": true
            }
          }
        },
        "additionalProperties": false
      },
      "resourceRelationshipsInPatchRequest": {
        "type": "object",
        "properties": {
          "toOne": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nullableToOneEmptyInRequest"
              }
            ]
          },
          "requiredToOne": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nullableToOneEmptyInRequest"
              }
            ]
          },
          "toMany": {
            "allOf": [
              {
                "$ref": "#/components/schemas/toManyEmptyInRequest"
              }
            ]
          },
          "requiredToMany": {
            "allOf": [
              {
                "$ref": "#/components/schemas/toManyEmptyInRequest"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "resourceRelationshipsInPostRequest": {
        "required": [
          "requiredToMany",
          "requiredToOne"
        ],
        "type": "object",
        "properties": {
          "toOne": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nullableToOneEmptyInRequest"
              }
            ]
          },
          "requiredToOne": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nullableToOneEmptyInRequest"
              }
            ]
          },
          "toMany": {
            "allOf": [
              {
                "$ref": "#/components/schemas/toManyEmptyInRequest"
              }
            ]
          },
          "requiredToMany": {
            "allOf": [
              {
                "$ref": "#/components/schemas/toManyEmptyInRequest"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "resourceRelationshipsInResponse": {
        "type": "object",
        "properties": {
          "toOne": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nullableToOneEmptyInResponse"
              }
            ]
          },
          "requiredToOne": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nullableToOneEmptyInResponse"
              }
            ]
          },
          "toMany": {
            "allOf": [
              {
                "$ref": "#/components/schemas/toManyEmptyInResponse"
              }
            ]
          },
          "requiredToMany": {
            "allOf": [
              {
                "$ref": "#/components/schemas/toManyEmptyInResponse"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "resourceResourceType": {
        "enum": [
          "resources"
        ],
        "type": "string",
        "additionalProperties": false
      },
      "toManyEmptyInRequest": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/emptyIdentifier"
            }
          }
        },
        "additionalProperties": false
      },
      "toManyEmptyInResponse": {
        "required": [
          "links"
        ],
        "type": "object",
        "properties": {
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/linksInRelationship"
              }
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/emptyIdentifier"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "nullable": true
            }
          }
        },
        "additionalProperties": false
      }
    }
  }
}