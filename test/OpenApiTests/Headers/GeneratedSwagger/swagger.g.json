{
  "openapi": "3.0.1",
  "info": {
    "title": "OpenApiTests",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "http://localhost"
    }
  ],
  "paths": {
    "/countries": {
      "get": {
        "tags": [
          "countries"
        ],
        "summary": "Retrieves a collection of countries.",
        "operationId": "getCountryCollection",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found countries, or an empty array if none were found.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/countryCollectionResponseDocument"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "countries"
        ],
        "summary": "Retrieves a collection of countries without returning them.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "headCountryCollection",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              "Content-Length": {
                "description": "Size of the HTTP response body, in bytes.",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          }
        }
      },
      "post": {
        "tags": [
          "countries"
        ],
        "summary": "Creates a new country.",
        "operationId": "postCountry",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          }
        ],
        "requestBody": {
          "description": "The attributes and relationships of the country to create.",
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/createCountryRequestDocument"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The country was successfully created, which resulted in additional changes. The newly created country is returned.",
            "headers": {
              "Location": {
                "description": "The URL at which the newly created country can be retrieved.",
                "required": true,
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/countryPrimaryResponseDocument"
                }
              }
            }
          },
          "204": {
            "description": "The country was successfully created, which did not result in additional changes."
          },
          "400": {
            "description": "The query string is invalid or the request body is missing or malformed.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "403": {
            "description": "Client-generated IDs cannot be used at this endpoint.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "A related resource does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "409": {
            "description": "The request body contains conflicting information or another resource with the same ID already exists.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "422": {
            "description": "Validation of the request body failed.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      }
    },
    "/countries/{id}": {
      "get": {
        "tags": [
          "countries"
        ],
        "summary": "Retrieves an individual country by its identifier.",
        "operationId": "getCountry",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the country to retrieve.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found country.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/countryPrimaryResponseDocument"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The country does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "countries"
        ],
        "summary": "Retrieves an individual country by its identifier without returning it.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "headCountry",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the country to retrieve.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              "Content-Length": {
                "description": "Size of the HTTP response body, in bytes.",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          },
          "404": {
            "description": "The country does not exist."
          }
        }
      },
      "patch": {
        "tags": [
          "countries"
        ],
        "summary": "Updates an existing country.",
        "operationId": "patchCountry",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the country to update.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          }
        ],
        "requestBody": {
          "description": "The attributes and relationships of the country to update. Omitted fields are left unchanged.",
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/updateCountryRequestDocument"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The country was successfully updated, which resulted in additional changes. The updated country is returned.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/countryPrimaryResponseDocument"
                }
              }
            }
          },
          "204": {
            "description": "The country was successfully updated, which did not result in additional changes."
          },
          "400": {
            "description": "The query string is invalid or the request body is missing or malformed.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The country or a related resource does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "409": {
            "description": "A resource type or identifier in the request body is incompatible.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "422": {
            "description": "Validation of the request body failed.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "countries"
        ],
        "summary": "Deletes an existing country by its identifier.",
        "operationId": "deleteCountry",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the country to delete.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The country was successfully deleted."
          },
          "404": {
            "description": "The country does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      }
    },
    "/countries/{id}/languages": {
      "get": {
        "tags": [
          "countries"
        ],
        "summary": "Retrieves the related languages of an individual country's languages relationship.",
        "operationId": "getCountryLanguages",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the country whose related languages to retrieve.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found languages, or an empty array if none were found.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/languageCollectionResponseDocument"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The country does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "countries"
        ],
        "summary": "Retrieves the related languages of an individual country's languages relationship without returning them.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "headCountryLanguages",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the country whose related languages to retrieve.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              "Content-Length": {
                "description": "Size of the HTTP response body, in bytes.",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          },
          "404": {
            "description": "The country does not exist."
          }
        }
      }
    },
    "/countries/{id}/relationships/languages": {
      "get": {
        "tags": [
          "countries"
        ],
        "summary": "Retrieves the related language identities of an individual country's languages relationship.",
        "operationId": "getCountryLanguagesRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the country whose related language identities to retrieve.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found language identities, or an empty array if none were found.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/languageIdentifierCollectionResponseDocument"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The country does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "countries"
        ],
        "summary": "Retrieves the related language identities of an individual country's languages relationship without returning them.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "headCountryLanguagesRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the country whose related language identities to retrieve.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              "Content-Length": {
                "description": "Size of the HTTP response body, in bytes.",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          },
          "404": {
            "description": "The country does not exist."
          }
        }
      },
      "post": {
        "tags": [
          "countries"
        ],
        "summary": "Adds existing languages to the languages relationship of an individual country.",
        "operationId": "postCountryLanguagesRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the country to add languages to.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The identities of the languages to add to the languages relationship.",
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/toManyLanguageInRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The languages were successfully added, which did not result in additional changes."
          },
          "400": {
            "description": "The request body is missing or malformed.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The country or a related resource does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "409": {
            "description": "The request body contains conflicting information or another resource with the same ID already exists.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "countries"
        ],
        "summary": "Assigns existing languages to the languages relationship of an individual country.",
        "operationId": "patchCountryLanguagesRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the country whose languages relationship to assign.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The identities of the languages to assign to the languages relationship, or an empty array to clear the relationship.",
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/toManyLanguageInRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The languages relationship was successfully updated, which did not result in additional changes."
          },
          "400": {
            "description": "The request body is missing or malformed.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The country or a related resource does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "409": {
            "description": "The request body contains conflicting information or another resource with the same ID already exists.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "countries"
        ],
        "summary": "Removes existing languages from the languages relationship of an individual country.",
        "operationId": "deleteCountryLanguagesRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the country to remove languages from.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The identities of the languages to remove from the languages relationship.",
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/toManyLanguageInRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The languages were successfully removed, which did not result in additional changes."
          },
          "400": {
            "description": "The request body is missing or malformed.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The country or a related resource does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "409": {
            "description": "The request body contains conflicting information or another resource with the same ID already exists.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "attributesInCreateCountryRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "population": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "attributesInUpdateCountryRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "population": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "countryAttributesInResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "population": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "countryCollectionResponseDocument": {
        "required": [
          "data",
          "links"
        ],
        "type": "object",
        "properties": {
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/resourceCollectionTopLevelLinks"
              }
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/countryDataInResponse"
            }
          },
          "included": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dataInResponse"
            }
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/meta"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "countryDataInResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/dataInResponse"
          },
          {
            "required": [
              "id"
            ],
            "type": "object",
            "properties": {
              "id": {
                "minLength": 1,
                "type": "string",
                "format": "uuid"
              },
              "attributes": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/countryAttributesInResponse"
                  }
                ]
              },
              "relationships": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/countryRelationshipsInResponse"
                  }
                ]
              },
              "links": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/resourceLinks"
                  }
                ]
              },
              "meta": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/meta"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        ],
        "additionalProperties": false
      },
      "countryPrimaryResponseDocument": {
        "required": [
          "data",
          "links"
        ],
        "type": "object",
        "properties": {
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/resourceTopLevelLinks"
              }
            ]
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/countryDataInResponse"
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dataInResponse"
            }
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/meta"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "countryRelationshipsInResponse": {
        "type": "object",
        "properties": {
          "languages": {
            "allOf": [
              {
                "$ref": "#/components/schemas/toManyLanguageInResponse"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "countryResourceType": {
        "enum": [
          "countries"
        ],
        "type": "string",
        "additionalProperties": false
      },
      "createCountryRequestDocument": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dataInCreateCountryRequest"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "dataInCreateCountryRequest": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/countryResourceType"
              }
            ]
          },
          "attributes": {
            "allOf": [
              {
                "$ref": "#/components/schemas/attributesInCreateCountryRequest"
              }
            ]
          },
          "relationships": {
            "allOf": [
              {
                "$ref": "#/components/schemas/relationshipsInCreateCountryRequest"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "dataInResponse": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "countries": "#/components/schemas/countryDataInResponse",
            "languages": "#/components/schemas/languageDataInResponse"
          }
        },
        "x-abstract": true
      },
      "dataInUpdateCountryRequest": {
        "required": [
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/countryResourceType"
              }
            ]
          },
          "id": {
            "minLength": 1,
            "type": "string",
            "format": "uuid"
          },
          "attributes": {
            "allOf": [
              {
                "$ref": "#/components/schemas/attributesInUpdateCountryRequest"
              }
            ]
          },
          "relationships": {
            "allOf": [
              {
                "$ref": "#/components/schemas/relationshipsInUpdateCountryRequest"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "errorLinks": {
        "type": "object",
        "properties": {
          "about": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "errorObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/errorLinks"
              }
            ],
            "nullable": true
          },
          "status": {
            "type": "string"
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/errorSource"
              }
            ],
            "nullable": true
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/meta"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "errorResponseDocument": {
        "required": [
          "errors",
          "links"
        ],
        "type": "object",
        "properties": {
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/errorTopLevelLinks"
              }
            ]
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/errorObject"
            }
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/meta"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "errorSource": {
        "type": "object",
        "properties": {
          "pointer": {
            "type": "string",
            "nullable": true
          },
          "parameter": {
            "type": "string",
            "nullable": true
          },
          "header": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "errorTopLevelLinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string"
          },
          "describedby": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "languageAttributesInResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "languageCollectionResponseDocument": {
        "required": [
          "data",
          "links"
        ],
        "type": "object",
        "properties": {
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/resourceCollectionTopLevelLinks"
              }
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/languageDataInResponse"
            }
          },
          "included": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dataInResponse"
            }
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/meta"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "languageDataInResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/dataInResponse"
          },
          {
            "required": [
              "id"
            ],
            "type": "object",
            "properties": {
              "id": {
                "minLength": 1,
                "type": "string",
                "format": "uuid"
              },
              "attributes": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/languageAttributesInResponse"
                  }
                ]
              },
              "links": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/resourceLinks"
                  }
                ]
              },
              "meta": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/meta"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        ],
        "additionalProperties": false
      },
      "languageIdentifierCollectionResponseDocument": {
        "required": [
          "data",
          "links"
        ],
        "type": "object",
        "properties": {
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/resourceIdentifierCollectionTopLevelLinks"
              }
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/languageIdentifierInResponse"
            }
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/meta"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "languageIdentifierInRequest": {
        "required": [
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/languageResourceType"
              }
            ]
          },
          "id": {
            "minLength": 1,
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "languageIdentifierInResponse": {
        "required": [
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/languageResourceType"
              }
            ]
          },
          "id": {
            "minLength": 1,
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "languageResourceType": {
        "enum": [
          "languages"
        ],
        "type": "string",
        "additionalProperties": false
      },
      "meta": {
        "type": "object",
        "additionalProperties": {
          "nullable": true
        }
      },
      "relationshipLinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string"
          },
          "related": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "relationshipsInCreateCountryRequest": {
        "type": "object",
        "properties": {
          "languages": {
            "allOf": [
              {
                "$ref": "#/components/schemas/toManyLanguageInRequest"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "relationshipsInUpdateCountryRequest": {
        "type": "object",
        "properties": {
          "languages": {
            "allOf": [
              {
                "$ref": "#/components/schemas/toManyLanguageInRequest"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "resourceCollectionTopLevelLinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string"
          },
          "describedby": {
            "type": "string"
          },
          "first": {
            "type": "string"
          },
          "last": {
            "type": "string"
          },
          "prev": {
            "type": "string"
          },
          "next": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "resourceIdentifierCollectionTopLevelLinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string"
          },
          "related": {
            "type": "string"
          },
          "describedby": {
            "type": "string"
          },
          "first": {
            "type": "string"
          },
          "last": {
            "type": "string"
          },
          "prev": {
            "type": "string"
          },
          "next": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "resourceLinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "resourceTopLevelLinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string"
          },
          "describedby": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "toManyLanguageInRequest": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/languageIdentifierInRequest"
            }
          }
        },
        "additionalProperties": false
      },
      "toManyLanguageInResponse": {
        "type": "object",
        "properties": {
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/relationshipLinks"
              }
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/languageIdentifierInResponse"
            }
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/meta"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "updateCountryRequestDocument": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dataInUpdateCountryRequest"
              }
            ]
          }
        },
        "additionalProperties": false
      }
    }
  }
}