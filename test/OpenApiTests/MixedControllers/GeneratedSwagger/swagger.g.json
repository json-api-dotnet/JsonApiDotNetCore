{
  "openapi": "3.0.4",
  "info": {
    "title": "OpenApiTests",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "http://localhost"
    }
  ],
  "paths": {
    "/cupOfCoffees": {
      "get": {
        "tags": [
          "cupOfCoffees"
        ],
        "summary": "Retrieves a collection of cupOfCoffees.",
        "operationId": "getCupOfCoffeeCollection",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found cupOfCoffees, or an empty array if none were found.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/vnd.api+json; ext=openapi": {
                "schema": {
                  "$ref": "#/components/schemas/cupOfCoffeeCollectionResponseDocument"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid.",
            "content": {
              "application/vnd.api+json; ext=openapi": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "cupOfCoffees"
        ],
        "summary": "Retrieves a collection of cupOfCoffees without returning them.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "headCupOfCoffeeCollection",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              "Content-Length": {
                "description": "Size of the HTTP response body, in bytes.",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          }
        }
      }
    },
    "/cupOfCoffees/{id}": {
      "delete": {
        "tags": [
          "cupOfCoffees"
        ],
        "summary": "Deletes an existing cupOfCoffee by its identifier.",
        "operationId": "deleteCupOfCoffee",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the cupOfCoffee to delete.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The cupOfCoffee was successfully deleted."
          },
          "404": {
            "description": "The cupOfCoffee does not exist.",
            "content": {
              "application/vnd.api+json; ext=openapi": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      }
    },
    "/emails/send": {
      "post": {
        "tags": [
          "emails"
        ],
        "description": "Sends an email to the specified recipient.",
        "operationId": "sendEmail",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/email"
                  }
                ],
                "description": "The email to send."
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/httpValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/emails/sent-since": {
      "get": {
        "tags": [
          "emails"
        ],
        "description": "Gets all emails sent since the specified date/time.",
        "operationId": "getSentSince",
        "parameters": [
          {
            "name": "sinceUtc",
            "in": "query",
            "description": "The date/time (in UTC) since which the email was sent.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The date/time (in UTC) since which the email was sent.",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/email"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/httpValidationProblemDetails"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "emails"
        ],
        "description": "Gets all emails sent since the specified date/time.",
        "operationId": "tryGetSentSince",
        "parameters": [
          {
            "name": "sinceUtc",
            "in": "query",
            "description": "The date/time (in UTC) since which the email was sent.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The date/time (in UTC) since which the email was sent.",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/fileTransfers": {
      "post": {
        "tags": [
          "fileTransfers"
        ],
        "description": "Uploads a file. Returns HTTP 400 if the file is empty.",
        "operationId": "upload",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      },
      "get": {
        "tags": [
          "fileTransfers"
        ],
        "description": "Downloads the file with the specified name. Returns HTTP 404 if not found.",
        "operationId": "download",
        "parameters": [
          {
            "name": "fileName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "head": {
        "tags": [
          "fileTransfers"
        ],
        "description": "Downloads the file with the specified name. Returns HTTP 404 if not found.",
        "operationId": "tryDownload",
        "parameters": [
          {
            "name": "fileName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/fileTransfers/find": {
      "get": {
        "tags": [
          "fileTransfers"
        ],
        "description": "Returns whether the specified file is available for download.",
        "operationId": "exists",
        "parameters": [
          {
            "name": "fileName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "head": {
        "tags": [
          "fileTransfers"
        ],
        "description": "Returns whether the specified file is available for download.",
        "operationId": "tryExists",
        "parameters": [
          {
            "name": "fileName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "attributesInCupOfCoffeeResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/attributesInResponse"
          },
          {
            "type": "object",
            "properties": {
              "hasSugar": {
                "type": "boolean"
              },
              "hasMilk": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        ],
        "additionalProperties": false
      },
      "attributesInResponse": {
        "required": [
          "openapi:discriminator"
        ],
        "type": "object",
        "properties": {
          "openapi:discriminator": {
            "allOf": [
              {
                "$ref": "#/components/schemas/resourceType"
              }
            ]
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "openapi:discriminator",
          "mapping": {
            "cupOfCoffees": "#/components/schemas/attributesInCupOfCoffeeResponse"
          }
        },
        "x-abstract": true
      },
      "cupOfCoffeeCollectionResponseDocument": {
        "required": [
          "data",
          "links"
        ],
        "type": "object",
        "properties": {
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/resourceCollectionTopLevelLinks"
              }
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dataInCupOfCoffeeResponse"
            }
          },
          "included": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/resourceInResponse"
            }
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/meta"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "dataInCupOfCoffeeResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/resourceInResponse"
          },
          {
            "required": [
              "id"
            ],
            "type": "object",
            "properties": {
              "id": {
                "minLength": 1,
                "type": "string",
                "format": "int64"
              },
              "attributes": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/attributesInCupOfCoffeeResponse"
                  }
                ]
              },
              "links": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/resourceLinks"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        ],
        "additionalProperties": false
      },
      "email": {
        "required": [
          "body",
          "from",
          "subject",
          "to"
        ],
        "type": "object",
        "properties": {
          "subject": {
            "maxLength": 255,
            "type": "string",
            "description": "The email subject."
          },
          "body": {
            "type": "string",
            "description": "The email body."
          },
          "from": {
            "type": "string",
            "description": "The email address of the sender.",
            "format": "email"
          },
          "to": {
            "type": "string",
            "description": "The email address of the recipient.",
            "format": "email"
          },
          "sentAtUtc": {
            "type": "string",
            "description": "The date/time (in UTC) at which this email was sent.",
            "format": "date-time",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "errorLinks": {
        "type": "object",
        "properties": {
          "about": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "errorObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/errorLinks"
              }
            ],
            "nullable": true
          },
          "status": {
            "type": "string"
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/errorSource"
              }
            ],
            "nullable": true
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/meta"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "errorResponseDocument": {
        "required": [
          "errors",
          "links"
        ],
        "type": "object",
        "properties": {
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/errorTopLevelLinks"
              }
            ]
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/errorObject"
            }
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/meta"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "errorSource": {
        "type": "object",
        "properties": {
          "pointer": {
            "type": "string",
            "nullable": true
          },
          "parameter": {
            "type": "string",
            "nullable": true
          },
          "header": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "errorTopLevelLinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string"
          },
          "describedby": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "httpValidationProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "additionalProperties": { }
      },
      "meta": {
        "type": "object",
        "additionalProperties": {
          "nullable": true
        }
      },
      "resourceCollectionTopLevelLinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string"
          },
          "describedby": {
            "type": "string"
          },
          "first": {
            "type": "string"
          },
          "last": {
            "type": "string"
          },
          "prev": {
            "type": "string"
          },
          "next": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "resourceInResponse": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/resourceType"
              }
            ]
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/meta"
              }
            ]
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "cupOfCoffees": "#/components/schemas/dataInCupOfCoffeeResponse"
          }
        },
        "x-abstract": true
      },
      "resourceLinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "resourceType": {
        "enum": [
          "cupOfCoffees"
        ],
        "type": "string"
      }
    }
  }
}