{
  "openapi": "3.0.1",
  "info": {
    "title": "OpenApiTests",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "http://localhost"
    }
  ],
  "paths": {
    "/StaffMembers": {
      "get": {
        "tags": [
          "StaffMembers"
        ],
        "summary": "Retrieves a collection of StaffMembers.",
        "operationId": "GetStaffMemberCollection",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found StaffMembers, or an empty array if none were found.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/StaffMemberCollectionResponseDocument"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "StaffMembers"
        ],
        "summary": "Retrieves a collection of StaffMembers without returning them.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "HeadStaffMemberCollection",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              "Content-Length": {
                "description": "Size of the HTTP response body, in bytes.",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          }
        }
      },
      "post": {
        "tags": [
          "StaffMembers"
        ],
        "summary": "Creates a new StaffMember.",
        "operationId": "PostStaffMember",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          }
        ],
        "requestBody": {
          "description": "The attributes and relationships of the StaffMember to create.",
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/StaffMemberPostRequestDocument"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The StaffMember was successfully created, which resulted in additional changes. The newly created StaffMember is returned.",
            "headers": {
              "Location": {
                "description": "The URL at which the newly created StaffMember can be retrieved.",
                "required": true,
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/StaffMemberPrimaryResponseDocument"
                }
              }
            }
          },
          "204": {
            "description": "The StaffMember was successfully created, which did not result in additional changes."
          },
          "400": {
            "description": "The query string is invalid or the request body is missing or malformed.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          },
          "403": {
            "description": "Client-generated IDs cannot be used at this endpoint.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          },
          "409": {
            "description": "A resource type in the request body is incompatible.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          },
          "422": {
            "description": "Validation of the request body failed.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          }
        }
      }
    },
    "/StaffMembers/{id}": {
      "get": {
        "tags": [
          "StaffMembers"
        ],
        "summary": "Retrieves an individual StaffMember by its identifier.",
        "operationId": "GetStaffMember",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the StaffMember to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found StaffMember.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/StaffMemberPrimaryResponseDocument"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The StaffMember does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "StaffMembers"
        ],
        "summary": "Retrieves an individual StaffMember by its identifier without returning it.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "HeadStaffMember",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the StaffMember to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              "Content-Length": {
                "description": "Size of the HTTP response body, in bytes.",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          },
          "404": {
            "description": "The StaffMember does not exist."
          }
        }
      },
      "patch": {
        "tags": [
          "StaffMembers"
        ],
        "summary": "Updates an existing StaffMember.",
        "operationId": "PatchStaffMember",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the StaffMember to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          }
        ],
        "requestBody": {
          "description": "The attributes and relationships of the StaffMember to update. Omitted fields are left unchanged.",
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/StaffMemberPatchRequestDocument"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The StaffMember was successfully updated, which resulted in additional changes. The updated StaffMember is returned.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/StaffMemberPrimaryResponseDocument"
                }
              }
            }
          },
          "204": {
            "description": "The StaffMember was successfully updated, which did not result in additional changes."
          },
          "400": {
            "description": "The query string is invalid or the request body is missing or malformed.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The StaffMember or a related resource does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          },
          "409": {
            "description": "A resource type or identifier in the request body is incompatible.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          },
          "422": {
            "description": "Validation of the request body failed.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "StaffMembers"
        ],
        "summary": "Deletes an existing StaffMember by its identifier.",
        "operationId": "DeleteStaffMember",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the StaffMember to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The StaffMember was successfully deleted."
          },
          "404": {
            "description": "The StaffMember does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          }
        }
      }
    },
    "/Supermarkets": {
      "get": {
        "tags": [
          "Supermarkets"
        ],
        "summary": "Retrieves a collection of Supermarkets.",
        "operationId": "GetSupermarketCollection",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found Supermarkets, or an empty array if none were found.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/SupermarketCollectionResponseDocument"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "Supermarkets"
        ],
        "summary": "Retrieves a collection of Supermarkets without returning them.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "HeadSupermarketCollection",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              "Content-Length": {
                "description": "Size of the HTTP response body, in bytes.",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          }
        }
      },
      "post": {
        "tags": [
          "Supermarkets"
        ],
        "summary": "Creates a new Supermarket.",
        "operationId": "PostSupermarket",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          }
        ],
        "requestBody": {
          "description": "The attributes and relationships of the Supermarket to create.",
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SupermarketPostRequestDocument"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The Supermarket was successfully created, which resulted in additional changes. The newly created Supermarket is returned.",
            "headers": {
              "Location": {
                "description": "The URL at which the newly created Supermarket can be retrieved.",
                "required": true,
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/SupermarketPrimaryResponseDocument"
                }
              }
            }
          },
          "204": {
            "description": "The Supermarket was successfully created, which did not result in additional changes."
          },
          "400": {
            "description": "The query string is invalid or the request body is missing or malformed.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          },
          "403": {
            "description": "Client-generated IDs cannot be used at this endpoint.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          },
          "409": {
            "description": "A resource type in the request body is incompatible.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          },
          "422": {
            "description": "Validation of the request body failed.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          }
        }
      }
    },
    "/Supermarkets/{id}": {
      "get": {
        "tags": [
          "Supermarkets"
        ],
        "summary": "Retrieves an individual Supermarket by its identifier.",
        "operationId": "GetSupermarket",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the Supermarket to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found Supermarket.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/SupermarketPrimaryResponseDocument"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The Supermarket does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "Supermarkets"
        ],
        "summary": "Retrieves an individual Supermarket by its identifier without returning it.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "HeadSupermarket",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the Supermarket to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              "Content-Length": {
                "description": "Size of the HTTP response body, in bytes.",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          },
          "404": {
            "description": "The Supermarket does not exist."
          }
        }
      },
      "patch": {
        "tags": [
          "Supermarkets"
        ],
        "summary": "Updates an existing Supermarket.",
        "operationId": "PatchSupermarket",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the Supermarket to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          }
        ],
        "requestBody": {
          "description": "The attributes and relationships of the Supermarket to update. Omitted fields are left unchanged.",
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SupermarketPatchRequestDocument"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The Supermarket was successfully updated, which resulted in additional changes. The updated Supermarket is returned.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/SupermarketPrimaryResponseDocument"
                }
              }
            }
          },
          "204": {
            "description": "The Supermarket was successfully updated, which did not result in additional changes."
          },
          "400": {
            "description": "The query string is invalid or the request body is missing or malformed.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The Supermarket or a related resource does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          },
          "409": {
            "description": "A resource type or identifier in the request body is incompatible.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          },
          "422": {
            "description": "Validation of the request body failed.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Supermarkets"
        ],
        "summary": "Deletes an existing Supermarket by its identifier.",
        "operationId": "DeleteSupermarket",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the Supermarket to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The Supermarket was successfully deleted."
          },
          "404": {
            "description": "The Supermarket does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          }
        }
      }
    },
    "/Supermarkets/{id}/BackupStoreManager": {
      "get": {
        "tags": [
          "Supermarkets"
        ],
        "summary": "Retrieves the related StaffMember of an individual Supermarket's BackupStoreManager relationship.",
        "operationId": "GetSupermarketBackupStoreManager",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the Supermarket whose related StaffMember to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found StaffMember, or `null` if it was not found.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/NullableStaffMemberSecondaryResponseDocument"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The Supermarket does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "Supermarkets"
        ],
        "summary": "Retrieves the related StaffMember of an individual Supermarket's BackupStoreManager relationship without returning it.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "HeadSupermarketBackupStoreManager",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the Supermarket whose related StaffMember to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              "Content-Length": {
                "description": "Size of the HTTP response body, in bytes.",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          },
          "404": {
            "description": "The Supermarket does not exist."
          }
        }
      }
    },
    "/Supermarkets/{id}/relationships/BackupStoreManager": {
      "get": {
        "tags": [
          "Supermarkets"
        ],
        "summary": "Retrieves the related StaffMember identity of an individual Supermarket's BackupStoreManager relationship.",
        "operationId": "GetSupermarketBackupStoreManagerRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the Supermarket whose related StaffMember identity to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found StaffMember identity, or `null` if it was not found.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/NullableStaffMemberIdentifierResponseDocument"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The Supermarket does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "Supermarkets"
        ],
        "summary": "Retrieves the related StaffMember identity of an individual Supermarket's BackupStoreManager relationship without returning it.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "HeadSupermarketBackupStoreManagerRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the Supermarket whose related StaffMember identity to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              "Content-Length": {
                "description": "Size of the HTTP response body, in bytes.",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          },
          "404": {
            "description": "The Supermarket does not exist."
          }
        }
      },
      "patch": {
        "tags": [
          "Supermarkets"
        ],
        "summary": "Clears or assigns an existing StaffMember to the BackupStoreManager relationship of an individual Supermarket.",
        "operationId": "PatchSupermarketBackupStoreManagerRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the Supermarket whose BackupStoreManager relationship to assign or clear.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The identity of the StaffMember to assign to the BackupStoreManager relationship, or `null` to clear the relationship.",
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NullableToOneStaffMemberInRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The BackupStoreManager relationship was successfully updated, which did not result in additional changes."
          },
          "400": {
            "description": "The request body is missing or malformed.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The Supermarket does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          },
          "409": {
            "description": "A resource type in the request body is incompatible.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          }
        }
      }
    },
    "/Supermarkets/{id}/Cashiers": {
      "get": {
        "tags": [
          "Supermarkets"
        ],
        "summary": "Retrieves the related StaffMembers of an individual Supermarket's Cashiers relationship.",
        "operationId": "GetSupermarketCashiers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the Supermarket whose related StaffMembers to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found StaffMembers, or an empty array if none were found.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/StaffMemberCollectionResponseDocument"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The Supermarket does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "Supermarkets"
        ],
        "summary": "Retrieves the related StaffMembers of an individual Supermarket's Cashiers relationship without returning them.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "HeadSupermarketCashiers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the Supermarket whose related StaffMembers to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              "Content-Length": {
                "description": "Size of the HTTP response body, in bytes.",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          },
          "404": {
            "description": "The Supermarket does not exist."
          }
        }
      }
    },
    "/Supermarkets/{id}/relationships/Cashiers": {
      "get": {
        "tags": [
          "Supermarkets"
        ],
        "summary": "Retrieves the related StaffMember identities of an individual Supermarket's Cashiers relationship.",
        "operationId": "GetSupermarketCashiersRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the Supermarket whose related StaffMember identities to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found StaffMember identities, or an empty array if none were found.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/StaffMemberIdentifierCollectionResponseDocument"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The Supermarket does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "Supermarkets"
        ],
        "summary": "Retrieves the related StaffMember identities of an individual Supermarket's Cashiers relationship without returning them.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "HeadSupermarketCashiersRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the Supermarket whose related StaffMember identities to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              "Content-Length": {
                "description": "Size of the HTTP response body, in bytes.",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          },
          "404": {
            "description": "The Supermarket does not exist."
          }
        }
      },
      "post": {
        "tags": [
          "Supermarkets"
        ],
        "summary": "Adds existing StaffMembers to the Cashiers relationship of an individual Supermarket.",
        "operationId": "PostSupermarketCashiersRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the Supermarket to add StaffMembers to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The identities of the StaffMembers to add to the Cashiers relationship.",
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ToManyStaffMemberInRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The StaffMembers were successfully added, which did not result in additional changes."
          },
          "400": {
            "description": "The request body is missing or malformed.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The Supermarket does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          },
          "409": {
            "description": "A resource type in the request body is incompatible.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Supermarkets"
        ],
        "summary": "Assigns existing StaffMembers to the Cashiers relationship of an individual Supermarket.",
        "operationId": "PatchSupermarketCashiersRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the Supermarket whose Cashiers relationship to assign.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The identities of the StaffMembers to assign to the Cashiers relationship, or an empty array to clear the relationship.",
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ToManyStaffMemberInRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The Cashiers relationship was successfully updated, which did not result in additional changes."
          },
          "400": {
            "description": "The request body is missing or malformed.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The Supermarket does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          },
          "409": {
            "description": "A resource type in the request body is incompatible.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Supermarkets"
        ],
        "summary": "Removes existing StaffMembers from the Cashiers relationship of an individual Supermarket.",
        "operationId": "DeleteSupermarketCashiersRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the Supermarket to remove StaffMembers from.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The identities of the StaffMembers to remove from the Cashiers relationship.",
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ToManyStaffMemberInRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The StaffMembers were successfully removed, which did not result in additional changes."
          },
          "400": {
            "description": "The request body is missing or malformed.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The Supermarket does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          },
          "409": {
            "description": "A resource type in the request body is incompatible.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          }
        }
      }
    },
    "/Supermarkets/{id}/StoreManager": {
      "get": {
        "tags": [
          "Supermarkets"
        ],
        "summary": "Retrieves the related StaffMember of an individual Supermarket's StoreManager relationship.",
        "operationId": "GetSupermarketStoreManager",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the Supermarket whose related StaffMember to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found StaffMember, or `null` if it was not found.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/StaffMemberSecondaryResponseDocument"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The Supermarket does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "Supermarkets"
        ],
        "summary": "Retrieves the related StaffMember of an individual Supermarket's StoreManager relationship without returning it.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "HeadSupermarketStoreManager",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the Supermarket whose related StaffMember to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              "Content-Length": {
                "description": "Size of the HTTP response body, in bytes.",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          },
          "404": {
            "description": "The Supermarket does not exist."
          }
        }
      }
    },
    "/Supermarkets/{id}/relationships/StoreManager": {
      "get": {
        "tags": [
          "Supermarkets"
        ],
        "summary": "Retrieves the related StaffMember identity of an individual Supermarket's StoreManager relationship.",
        "operationId": "GetSupermarketStoreManagerRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the Supermarket whose related StaffMember identity to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found StaffMember identity, or `null` if it was not found.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/StaffMemberIdentifierResponseDocument"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The Supermarket does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "Supermarkets"
        ],
        "summary": "Retrieves the related StaffMember identity of an individual Supermarket's StoreManager relationship without returning it.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "HeadSupermarketStoreManagerRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the Supermarket whose related StaffMember identity to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              "Content-Length": {
                "description": "Size of the HTTP response body, in bytes.",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          },
          "404": {
            "description": "The Supermarket does not exist."
          }
        }
      },
      "patch": {
        "tags": [
          "Supermarkets"
        ],
        "summary": "Assigns an existing StaffMember to the StoreManager relationship of an individual Supermarket.",
        "operationId": "PatchSupermarketStoreManagerRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the Supermarket whose StoreManager relationship to assign.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The identity of the StaffMember to assign to the StoreManager relationship.",
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ToOneStaffMemberInRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The StoreManager relationship was successfully updated, which did not result in additional changes."
          },
          "400": {
            "description": "The request body is missing or malformed.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The Supermarket does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          },
          "409": {
            "description": "A resource type in the request body is incompatible.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponseDocument"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "DataInResponse": {
        "required": [
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "minLength": 1,
            "type": "string"
          },
          "id": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "StaffMembers": "#/components/schemas/StaffMemberDataInResponse",
            "Supermarkets": "#/components/schemas/SupermarketDataInResponse"
          }
        },
        "x-abstract": true
      },
      "ErrorLinks": {
        "type": "object",
        "properties": {
          "about": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ErrorObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ErrorLinks"
              }
            ],
            "nullable": true
          },
          "status": {
            "type": "string"
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ErrorSource"
              }
            ],
            "nullable": true
          },
          "meta": {
            "type": "object",
            "additionalProperties": { },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ErrorResponseDocument": {
        "required": [
          "errors",
          "links"
        ],
        "type": "object",
        "properties": {
          "jsonapi": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Jsonapi"
              }
            ]
          },
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LinksInErrorDocument"
              }
            ]
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorObject"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "nullable": true
            }
          }
        },
        "additionalProperties": false
      },
      "ErrorSource": {
        "type": "object",
        "properties": {
          "pointer": {
            "type": "string",
            "nullable": true
          },
          "parameter": {
            "type": "string",
            "nullable": true
          },
          "header": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Jsonapi": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string"
          },
          "ext": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "profile": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "nullable": true
            }
          }
        },
        "additionalProperties": false
      },
      "LinksInErrorDocument": {
        "required": [
          "self"
        ],
        "type": "object",
        "properties": {
          "self": {
            "minLength": 1,
            "type": "string"
          },
          "describedby": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "LinksInRelationship": {
        "required": [
          "related",
          "self"
        ],
        "type": "object",
        "properties": {
          "self": {
            "minLength": 1,
            "type": "string"
          },
          "related": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "LinksInResourceCollectionDocument": {
        "required": [
          "self"
        ],
        "type": "object",
        "properties": {
          "self": {
            "minLength": 1,
            "type": "string"
          },
          "describedby": {
            "type": "string"
          },
          "first": {
            "type": "string"
          },
          "last": {
            "type": "string"
          },
          "prev": {
            "type": "string"
          },
          "next": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "LinksInResourceData": {
        "required": [
          "self"
        ],
        "type": "object",
        "properties": {
          "self": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "LinksInResourceDocument": {
        "required": [
          "self"
        ],
        "type": "object",
        "properties": {
          "self": {
            "minLength": 1,
            "type": "string"
          },
          "describedby": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "LinksInResourceIdentifierCollectionDocument": {
        "required": [
          "related",
          "self"
        ],
        "type": "object",
        "properties": {
          "self": {
            "minLength": 1,
            "type": "string"
          },
          "related": {
            "minLength": 1,
            "type": "string"
          },
          "describedby": {
            "type": "string"
          },
          "first": {
            "type": "string"
          },
          "last": {
            "type": "string"
          },
          "prev": {
            "type": "string"
          },
          "next": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "LinksInResourceIdentifierDocument": {
        "required": [
          "related",
          "self"
        ],
        "type": "object",
        "properties": {
          "self": {
            "minLength": 1,
            "type": "string"
          },
          "related": {
            "minLength": 1,
            "type": "string"
          },
          "describedby": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "NullableStaffMemberIdentifierResponseDocument": {
        "required": [
          "data",
          "links"
        ],
        "type": "object",
        "properties": {
          "jsonapi": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Jsonapi"
              }
            ]
          },
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LinksInResourceIdentifierDocument"
              }
            ]
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StaffMemberIdentifier"
              }
            ],
            "nullable": true
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "nullable": true
            }
          }
        },
        "additionalProperties": false
      },
      "NullableStaffMemberSecondaryResponseDocument": {
        "required": [
          "data",
          "links"
        ],
        "type": "object",
        "properties": {
          "jsonapi": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Jsonapi"
              }
            ]
          },
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LinksInResourceDocument"
              }
            ]
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StaffMemberDataInResponse"
              }
            ],
            "nullable": true
          },
          "included": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataInResponse"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "nullable": true
            }
          }
        },
        "additionalProperties": false
      },
      "NullableToOneStaffMemberInRequest": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StaffMemberIdentifier"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NullableToOneStaffMemberInResponse": {
        "required": [
          "links"
        ],
        "type": "object",
        "properties": {
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LinksInRelationship"
              }
            ]
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StaffMemberIdentifier"
              }
            ],
            "nullable": true
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "nullable": true
            }
          }
        },
        "additionalProperties": false
      },
      "StaffMemberAttributesInPatchRequest": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Age": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "StaffMemberAttributesInPostRequest": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Age": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "StaffMemberAttributesInResponse": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Age": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "StaffMemberCollectionResponseDocument": {
        "required": [
          "data",
          "links"
        ],
        "type": "object",
        "properties": {
          "jsonapi": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Jsonapi"
              }
            ]
          },
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LinksInResourceCollectionDocument"
              }
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StaffMemberDataInResponse"
            }
          },
          "included": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataInResponse"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "nullable": true
            }
          }
        },
        "additionalProperties": false
      },
      "StaffMemberDataInPatchRequest": {
        "required": [
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/StaffMemberResourceType"
          },
          "id": {
            "minLength": 1,
            "type": "string"
          },
          "attributes": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StaffMemberAttributesInPatchRequest"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "StaffMemberDataInPostRequest": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/StaffMemberResourceType"
          },
          "attributes": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StaffMemberAttributesInPostRequest"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "StaffMemberDataInResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataInResponse"
          },
          {
            "type": "object",
            "properties": {
              "attributes": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/StaffMemberAttributesInResponse"
                  }
                ]
              },
              "links": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LinksInResourceData"
                  }
                ]
              },
              "meta": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "nullable": true
                }
              }
            },
            "additionalProperties": false
          }
        ],
        "additionalProperties": false
      },
      "StaffMemberIdentifier": {
        "required": [
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/StaffMemberResourceType"
          },
          "id": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "StaffMemberIdentifierCollectionResponseDocument": {
        "required": [
          "data",
          "links"
        ],
        "type": "object",
        "properties": {
          "jsonapi": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Jsonapi"
              }
            ]
          },
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LinksInResourceIdentifierCollectionDocument"
              }
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StaffMemberIdentifier"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "nullable": true
            }
          }
        },
        "additionalProperties": false
      },
      "StaffMemberIdentifierResponseDocument": {
        "required": [
          "data",
          "links"
        ],
        "type": "object",
        "properties": {
          "jsonapi": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Jsonapi"
              }
            ]
          },
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LinksInResourceIdentifierDocument"
              }
            ]
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StaffMemberIdentifier"
              }
            ]
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "nullable": true
            }
          }
        },
        "additionalProperties": false
      },
      "StaffMemberPatchRequestDocument": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StaffMemberDataInPatchRequest"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "StaffMemberPostRequestDocument": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StaffMemberDataInPostRequest"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "StaffMemberPrimaryResponseDocument": {
        "required": [
          "data",
          "links"
        ],
        "type": "object",
        "properties": {
          "jsonapi": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Jsonapi"
              }
            ]
          },
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LinksInResourceDocument"
              }
            ]
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StaffMemberDataInResponse"
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataInResponse"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "nullable": true
            }
          }
        },
        "additionalProperties": false
      },
      "StaffMemberResourceType": {
        "enum": [
          "StaffMembers"
        ],
        "type": "string",
        "additionalProperties": false
      },
      "StaffMemberSecondaryResponseDocument": {
        "required": [
          "data",
          "links"
        ],
        "type": "object",
        "properties": {
          "jsonapi": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Jsonapi"
              }
            ]
          },
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LinksInResourceDocument"
              }
            ]
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StaffMemberDataInResponse"
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataInResponse"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "nullable": true
            }
          }
        },
        "additionalProperties": false
      },
      "SupermarketAttributesInPatchRequest": {
        "type": "object",
        "properties": {
          "NameOfCity": {
            "type": "string"
          },
          "Kind": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SupermarketType"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "SupermarketAttributesInPostRequest": {
        "required": [
          "NameOfCity"
        ],
        "type": "object",
        "properties": {
          "NameOfCity": {
            "type": "string"
          },
          "Kind": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SupermarketType"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "SupermarketAttributesInResponse": {
        "type": "object",
        "properties": {
          "NameOfCity": {
            "type": "string"
          },
          "Kind": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SupermarketType"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "SupermarketCollectionResponseDocument": {
        "required": [
          "data",
          "links"
        ],
        "type": "object",
        "properties": {
          "jsonapi": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Jsonapi"
              }
            ]
          },
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LinksInResourceCollectionDocument"
              }
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SupermarketDataInResponse"
            }
          },
          "included": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataInResponse"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "nullable": true
            }
          }
        },
        "additionalProperties": false
      },
      "SupermarketDataInPatchRequest": {
        "required": [
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/SupermarketResourceType"
          },
          "id": {
            "minLength": 1,
            "type": "string"
          },
          "attributes": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SupermarketAttributesInPatchRequest"
              }
            ]
          },
          "relationships": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SupermarketRelationshipsInPatchRequest"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "SupermarketDataInPostRequest": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/SupermarketResourceType"
          },
          "attributes": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SupermarketAttributesInPostRequest"
              }
            ]
          },
          "relationships": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SupermarketRelationshipsInPostRequest"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "SupermarketDataInResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DataInResponse"
          },
          {
            "type": "object",
            "properties": {
              "attributes": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SupermarketAttributesInResponse"
                  }
                ]
              },
              "relationships": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SupermarketRelationshipsInResponse"
                  }
                ]
              },
              "links": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LinksInResourceData"
                  }
                ]
              },
              "meta": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "nullable": true
                }
              }
            },
            "additionalProperties": false
          }
        ],
        "additionalProperties": false
      },
      "SupermarketPatchRequestDocument": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SupermarketDataInPatchRequest"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "SupermarketPostRequestDocument": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SupermarketDataInPostRequest"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "SupermarketPrimaryResponseDocument": {
        "required": [
          "data",
          "links"
        ],
        "type": "object",
        "properties": {
          "jsonapi": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Jsonapi"
              }
            ]
          },
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LinksInResourceDocument"
              }
            ]
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SupermarketDataInResponse"
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataInResponse"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "nullable": true
            }
          }
        },
        "additionalProperties": false
      },
      "SupermarketRelationshipsInPatchRequest": {
        "type": "object",
        "properties": {
          "StoreManager": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ToOneStaffMemberInRequest"
              }
            ]
          },
          "BackupStoreManager": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NullableToOneStaffMemberInRequest"
              }
            ]
          },
          "Cashiers": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ToManyStaffMemberInRequest"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "SupermarketRelationshipsInPostRequest": {
        "required": [
          "StoreManager"
        ],
        "type": "object",
        "properties": {
          "StoreManager": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ToOneStaffMemberInRequest"
              }
            ]
          },
          "BackupStoreManager": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NullableToOneStaffMemberInRequest"
              }
            ]
          },
          "Cashiers": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ToManyStaffMemberInRequest"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "SupermarketRelationshipsInResponse": {
        "type": "object",
        "properties": {
          "StoreManager": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ToOneStaffMemberInResponse"
              }
            ]
          },
          "BackupStoreManager": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NullableToOneStaffMemberInResponse"
              }
            ]
          },
          "Cashiers": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ToManyStaffMemberInResponse"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "SupermarketResourceType": {
        "enum": [
          "Supermarkets"
        ],
        "type": "string",
        "additionalProperties": false
      },
      "SupermarketType": {
        "enum": [
          "Traditional",
          "Budget",
          "Warehouse"
        ],
        "type": "string"
      },
      "ToManyStaffMemberInRequest": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StaffMemberIdentifier"
            }
          }
        },
        "additionalProperties": false
      },
      "ToManyStaffMemberInResponse": {
        "required": [
          "links"
        ],
        "type": "object",
        "properties": {
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LinksInRelationship"
              }
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StaffMemberIdentifier"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "nullable": true
            }
          }
        },
        "additionalProperties": false
      },
      "ToOneStaffMemberInRequest": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StaffMemberIdentifier"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "ToOneStaffMemberInResponse": {
        "required": [
          "links"
        ],
        "type": "object",
        "properties": {
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LinksInRelationship"
              }
            ]
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StaffMemberIdentifier"
              }
            ]
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "nullable": true
            }
          }
        },
        "additionalProperties": false
      }
    }
  }
}