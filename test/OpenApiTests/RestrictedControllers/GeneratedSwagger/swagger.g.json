{
  "openapi": "3.0.1",
  "info": {
    "title": "OpenApiTests",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "http://localhost"
    }
  ],
  "paths": {
    "/dataStreams": {
      "get": {
        "tags": [
          "dataStreams"
        ],
        "summary": "Retrieves a collection of dataStreams.",
        "operationId": "getDataStreamCollection",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found dataStreams, or an empty array if none were found.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/dataStreamCollectionResponseDocument"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "dataStreams"
        ],
        "summary": "Retrieves a collection of dataStreams without returning them.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "headDataStreamCollection",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              "Content-Length": {
                "description": "Size of the HTTP response body, in bytes.",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          }
        }
      }
    },
    "/dataStreams/{id}": {
      "get": {
        "tags": [
          "dataStreams"
        ],
        "summary": "Retrieves an individual dataStream by its identifier.",
        "operationId": "getDataStream",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the dataStream to retrieve.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "int64"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found dataStream.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/dataStreamPrimaryResponseDocument"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The dataStream does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "dataStreams"
        ],
        "summary": "Retrieves an individual dataStream by its identifier without returning it.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "headDataStream",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the dataStream to retrieve.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "int64"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              "Content-Length": {
                "description": "Size of the HTTP response body, in bytes.",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          },
          "404": {
            "description": "The dataStream does not exist."
          }
        }
      }
    },
    "/readOnlyChannels": {
      "get": {
        "tags": [
          "readOnlyChannels"
        ],
        "summary": "Retrieves a collection of readOnlyChannels.",
        "operationId": "getReadOnlyChannelCollection",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found readOnlyChannels, or an empty array if none were found.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/readOnlyChannelCollectionResponseDocument"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "readOnlyChannels"
        ],
        "summary": "Retrieves a collection of readOnlyChannels without returning them.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "headReadOnlyChannelCollection",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              "Content-Length": {
                "description": "Size of the HTTP response body, in bytes.",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          }
        }
      }
    },
    "/readOnlyChannels/{id}": {
      "get": {
        "tags": [
          "readOnlyChannels"
        ],
        "summary": "Retrieves an individual readOnlyChannel by its identifier.",
        "operationId": "getReadOnlyChannel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the readOnlyChannel to retrieve.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "int64"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found readOnlyChannel.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/readOnlyChannelPrimaryResponseDocument"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The readOnlyChannel does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "readOnlyChannels"
        ],
        "summary": "Retrieves an individual readOnlyChannel by its identifier without returning it.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "headReadOnlyChannel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the readOnlyChannel to retrieve.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "int64"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              "Content-Length": {
                "description": "Size of the HTTP response body, in bytes.",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          },
          "404": {
            "description": "The readOnlyChannel does not exist."
          }
        }
      }
    },
    "/readOnlyChannels/{id}/audioStreams": {
      "get": {
        "tags": [
          "readOnlyChannels"
        ],
        "summary": "Retrieves the related dataStreams of an individual readOnlyChannel's audioStreams relationship.",
        "operationId": "getReadOnlyChannelAudioStreams",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the readOnlyChannel whose related dataStreams to retrieve.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "int64"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found dataStreams, or an empty array if none were found.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/dataStreamCollectionResponseDocument"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The readOnlyChannel does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "readOnlyChannels"
        ],
        "summary": "Retrieves the related dataStreams of an individual readOnlyChannel's audioStreams relationship without returning them.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "headReadOnlyChannelAudioStreams",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the readOnlyChannel whose related dataStreams to retrieve.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "int64"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              "Content-Length": {
                "description": "Size of the HTTP response body, in bytes.",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          },
          "404": {
            "description": "The readOnlyChannel does not exist."
          }
        }
      }
    },
    "/readOnlyChannels/{id}/relationships/audioStreams": {
      "get": {
        "tags": [
          "readOnlyChannels"
        ],
        "summary": "Retrieves the related dataStream identities of an individual readOnlyChannel's audioStreams relationship.",
        "operationId": "getReadOnlyChannelAudioStreamsRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the readOnlyChannel whose related dataStream identities to retrieve.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "int64"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found dataStream identities, or an empty array if none were found.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/dataStreamIdentifierCollectionResponseDocument"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The readOnlyChannel does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "readOnlyChannels"
        ],
        "summary": "Retrieves the related dataStream identities of an individual readOnlyChannel's audioStreams relationship without returning them.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "headReadOnlyChannelAudioStreamsRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the readOnlyChannel whose related dataStream identities to retrieve.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "int64"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              "Content-Length": {
                "description": "Size of the HTTP response body, in bytes.",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          },
          "404": {
            "description": "The readOnlyChannel does not exist."
          }
        }
      }
    },
    "/readOnlyChannels/{id}/ultraHighDefinitionVideoStream": {
      "get": {
        "tags": [
          "readOnlyChannels"
        ],
        "summary": "Retrieves the related dataStream of an individual readOnlyChannel's ultraHighDefinitionVideoStream relationship.",
        "operationId": "getReadOnlyChannelUltraHighDefinitionVideoStream",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the readOnlyChannel whose related dataStream to retrieve.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "int64"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found dataStream, or `null` if it was not found.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/nullableDataStreamSecondaryResponseDocument"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The readOnlyChannel does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "readOnlyChannels"
        ],
        "summary": "Retrieves the related dataStream of an individual readOnlyChannel's ultraHighDefinitionVideoStream relationship without returning it.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "headReadOnlyChannelUltraHighDefinitionVideoStream",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the readOnlyChannel whose related dataStream to retrieve.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "int64"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              "Content-Length": {
                "description": "Size of the HTTP response body, in bytes.",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          },
          "404": {
            "description": "The readOnlyChannel does not exist."
          }
        }
      }
    },
    "/readOnlyChannels/{id}/relationships/ultraHighDefinitionVideoStream": {
      "get": {
        "tags": [
          "readOnlyChannels"
        ],
        "summary": "Retrieves the related dataStream identity of an individual readOnlyChannel's ultraHighDefinitionVideoStream relationship.",
        "operationId": "getReadOnlyChannelUltraHighDefinitionVideoStreamRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the readOnlyChannel whose related dataStream identity to retrieve.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "int64"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found dataStream identity, or `null` if it was not found.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/nullableDataStreamIdentifierResponseDocument"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The readOnlyChannel does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "readOnlyChannels"
        ],
        "summary": "Retrieves the related dataStream identity of an individual readOnlyChannel's ultraHighDefinitionVideoStream relationship without returning it.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "headReadOnlyChannelUltraHighDefinitionVideoStreamRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the readOnlyChannel whose related dataStream identity to retrieve.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "int64"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              "Content-Length": {
                "description": "Size of the HTTP response body, in bytes.",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          },
          "404": {
            "description": "The readOnlyChannel does not exist."
          }
        }
      }
    },
    "/readOnlyChannels/{id}/videoStream": {
      "get": {
        "tags": [
          "readOnlyChannels"
        ],
        "summary": "Retrieves the related dataStream of an individual readOnlyChannel's videoStream relationship.",
        "operationId": "getReadOnlyChannelVideoStream",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the readOnlyChannel whose related dataStream to retrieve.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "int64"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found dataStream, or `null` if it was not found.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/dataStreamSecondaryResponseDocument"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The readOnlyChannel does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "readOnlyChannels"
        ],
        "summary": "Retrieves the related dataStream of an individual readOnlyChannel's videoStream relationship without returning it.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "headReadOnlyChannelVideoStream",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the readOnlyChannel whose related dataStream to retrieve.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "int64"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              "Content-Length": {
                "description": "Size of the HTTP response body, in bytes.",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          },
          "404": {
            "description": "The readOnlyChannel does not exist."
          }
        }
      }
    },
    "/readOnlyChannels/{id}/relationships/videoStream": {
      "get": {
        "tags": [
          "readOnlyChannels"
        ],
        "summary": "Retrieves the related dataStream identity of an individual readOnlyChannel's videoStream relationship.",
        "operationId": "getReadOnlyChannelVideoStreamRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the readOnlyChannel whose related dataStream identity to retrieve.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "int64"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found dataStream identity, or `null` if it was not found.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/dataStreamIdentifierResponseDocument"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The readOnlyChannel does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "readOnlyChannels"
        ],
        "summary": "Retrieves the related dataStream identity of an individual readOnlyChannel's videoStream relationship without returning it.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "headReadOnlyChannelVideoStreamRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the readOnlyChannel whose related dataStream identity to retrieve.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "int64"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              "Content-Length": {
                "description": "Size of the HTTP response body, in bytes.",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          },
          "404": {
            "description": "The readOnlyChannel does not exist."
          }
        }
      }
    },
    "/readOnlyResourceChannels": {
      "get": {
        "tags": [
          "readOnlyResourceChannels"
        ],
        "summary": "Retrieves a collection of readOnlyResourceChannels.",
        "operationId": "getReadOnlyResourceChannelCollection",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found readOnlyResourceChannels, or an empty array if none were found.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/readOnlyResourceChannelCollectionResponseDocument"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "readOnlyResourceChannels"
        ],
        "summary": "Retrieves a collection of readOnlyResourceChannels without returning them.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "headReadOnlyResourceChannelCollection",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              "Content-Length": {
                "description": "Size of the HTTP response body, in bytes.",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          }
        }
      }
    },
    "/readOnlyResourceChannels/{id}": {
      "get": {
        "tags": [
          "readOnlyResourceChannels"
        ],
        "summary": "Retrieves an individual readOnlyResourceChannel by its identifier.",
        "operationId": "getReadOnlyResourceChannel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the readOnlyResourceChannel to retrieve.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "int64"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found readOnlyResourceChannel.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/readOnlyResourceChannelPrimaryResponseDocument"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The readOnlyResourceChannel does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "readOnlyResourceChannels"
        ],
        "summary": "Retrieves an individual readOnlyResourceChannel by its identifier without returning it.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "headReadOnlyResourceChannel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the readOnlyResourceChannel to retrieve.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "int64"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              "Content-Length": {
                "description": "Size of the HTTP response body, in bytes.",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          },
          "404": {
            "description": "The readOnlyResourceChannel does not exist."
          }
        }
      }
    },
    "/readOnlyResourceChannels/{id}/audioStreams": {
      "get": {
        "tags": [
          "readOnlyResourceChannels"
        ],
        "summary": "Retrieves the related dataStreams of an individual readOnlyResourceChannel's audioStreams relationship.",
        "operationId": "getReadOnlyResourceChannelAudioStreams",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the readOnlyResourceChannel whose related dataStreams to retrieve.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "int64"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found dataStreams, or an empty array if none were found.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/dataStreamCollectionResponseDocument"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The readOnlyResourceChannel does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "readOnlyResourceChannels"
        ],
        "summary": "Retrieves the related dataStreams of an individual readOnlyResourceChannel's audioStreams relationship without returning them.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "headReadOnlyResourceChannelAudioStreams",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the readOnlyResourceChannel whose related dataStreams to retrieve.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "int64"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              "Content-Length": {
                "description": "Size of the HTTP response body, in bytes.",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          },
          "404": {
            "description": "The readOnlyResourceChannel does not exist."
          }
        }
      }
    },
    "/readOnlyResourceChannels/{id}/ultraHighDefinitionVideoStream": {
      "get": {
        "tags": [
          "readOnlyResourceChannels"
        ],
        "summary": "Retrieves the related dataStream of an individual readOnlyResourceChannel's ultraHighDefinitionVideoStream relationship.",
        "operationId": "getReadOnlyResourceChannelUltraHighDefinitionVideoStream",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the readOnlyResourceChannel whose related dataStream to retrieve.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "int64"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found dataStream, or `null` if it was not found.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/nullableDataStreamSecondaryResponseDocument"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The readOnlyResourceChannel does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "readOnlyResourceChannels"
        ],
        "summary": "Retrieves the related dataStream of an individual readOnlyResourceChannel's ultraHighDefinitionVideoStream relationship without returning it.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "headReadOnlyResourceChannelUltraHighDefinitionVideoStream",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the readOnlyResourceChannel whose related dataStream to retrieve.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "int64"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              "Content-Length": {
                "description": "Size of the HTTP response body, in bytes.",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          },
          "404": {
            "description": "The readOnlyResourceChannel does not exist."
          }
        }
      }
    },
    "/readOnlyResourceChannels/{id}/videoStream": {
      "get": {
        "tags": [
          "readOnlyResourceChannels"
        ],
        "summary": "Retrieves the related dataStream of an individual readOnlyResourceChannel's videoStream relationship.",
        "operationId": "getReadOnlyResourceChannelVideoStream",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the readOnlyResourceChannel whose related dataStream to retrieve.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "int64"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found dataStream, or `null` if it was not found.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/dataStreamSecondaryResponseDocument"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The readOnlyResourceChannel does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "readOnlyResourceChannels"
        ],
        "summary": "Retrieves the related dataStream of an individual readOnlyResourceChannel's videoStream relationship without returning it.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "headReadOnlyResourceChannelVideoStream",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the readOnlyResourceChannel whose related dataStream to retrieve.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "int64"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              "Content-Length": {
                "description": "Size of the HTTP response body, in bytes.",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          },
          "404": {
            "description": "The readOnlyResourceChannel does not exist."
          }
        }
      }
    },
    "/relationshipChannels/{id}/relationships/audioStreams": {
      "get": {
        "tags": [
          "relationshipChannels"
        ],
        "summary": "Retrieves the related dataStream identities of an individual relationshipChannel's audioStreams relationship.",
        "operationId": "getRelationshipChannelAudioStreamsRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the relationshipChannel whose related dataStream identities to retrieve.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "int64"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found dataStream identities, or an empty array if none were found.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/dataStreamIdentifierCollectionResponseDocument"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The relationshipChannel does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "relationshipChannels"
        ],
        "summary": "Retrieves the related dataStream identities of an individual relationshipChannel's audioStreams relationship without returning them.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "headRelationshipChannelAudioStreamsRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the relationshipChannel whose related dataStream identities to retrieve.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "int64"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              "Content-Length": {
                "description": "Size of the HTTP response body, in bytes.",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          },
          "404": {
            "description": "The relationshipChannel does not exist."
          }
        }
      },
      "post": {
        "tags": [
          "relationshipChannels"
        ],
        "summary": "Adds existing dataStreams to the audioStreams relationship of an individual relationshipChannel.",
        "operationId": "postRelationshipChannelAudioStreamsRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the relationshipChannel to add dataStreams to.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The identities of the dataStreams to add to the audioStreams relationship.",
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/toManyDataStreamInRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The dataStreams were successfully added, which did not result in additional changes."
          },
          "400": {
            "description": "The request body is missing or malformed.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The relationshipChannel or a related resource does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "409": {
            "description": "The request body contains conflicting information or another resource with the same ID already exists.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "relationshipChannels"
        ],
        "summary": "Assigns existing dataStreams to the audioStreams relationship of an individual relationshipChannel.",
        "operationId": "patchRelationshipChannelAudioStreamsRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the relationshipChannel whose audioStreams relationship to assign.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The identities of the dataStreams to assign to the audioStreams relationship, or an empty array to clear the relationship.",
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/toManyDataStreamInRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The audioStreams relationship was successfully updated, which did not result in additional changes."
          },
          "400": {
            "description": "The request body is missing or malformed.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The relationshipChannel or a related resource does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "409": {
            "description": "The request body contains conflicting information or another resource with the same ID already exists.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "relationshipChannels"
        ],
        "summary": "Removes existing dataStreams from the audioStreams relationship of an individual relationshipChannel.",
        "operationId": "deleteRelationshipChannelAudioStreamsRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the relationshipChannel to remove dataStreams from.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The identities of the dataStreams to remove from the audioStreams relationship.",
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/toManyDataStreamInRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The dataStreams were successfully removed, which did not result in additional changes."
          },
          "400": {
            "description": "The request body is missing or malformed.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The relationshipChannel or a related resource does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "409": {
            "description": "The request body contains conflicting information or another resource with the same ID already exists.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      }
    },
    "/relationshipChannels/{id}/relationships/ultraHighDefinitionVideoStream": {
      "get": {
        "tags": [
          "relationshipChannels"
        ],
        "summary": "Retrieves the related dataStream identity of an individual relationshipChannel's ultraHighDefinitionVideoStream relationship.",
        "operationId": "getRelationshipChannelUltraHighDefinitionVideoStreamRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the relationshipChannel whose related dataStream identity to retrieve.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "int64"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found dataStream identity, or `null` if it was not found.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/nullableDataStreamIdentifierResponseDocument"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The relationshipChannel does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "relationshipChannels"
        ],
        "summary": "Retrieves the related dataStream identity of an individual relationshipChannel's ultraHighDefinitionVideoStream relationship without returning it.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "headRelationshipChannelUltraHighDefinitionVideoStreamRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the relationshipChannel whose related dataStream identity to retrieve.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "int64"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              "Content-Length": {
                "description": "Size of the HTTP response body, in bytes.",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          },
          "404": {
            "description": "The relationshipChannel does not exist."
          }
        }
      },
      "patch": {
        "tags": [
          "relationshipChannels"
        ],
        "summary": "Clears or assigns an existing dataStream to the ultraHighDefinitionVideoStream relationship of an individual relationshipChannel.",
        "operationId": "patchRelationshipChannelUltraHighDefinitionVideoStreamRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the relationshipChannel whose ultraHighDefinitionVideoStream relationship to assign or clear.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The identity of the dataStream to assign to the ultraHighDefinitionVideoStream relationship, or `null` to clear the relationship.",
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/nullableToOneDataStreamInRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The ultraHighDefinitionVideoStream relationship was successfully updated, which did not result in additional changes."
          },
          "400": {
            "description": "The request body is missing or malformed.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The relationshipChannel or a related resource does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "409": {
            "description": "The request body contains conflicting information or another resource with the same ID already exists.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      }
    },
    "/relationshipChannels/{id}/relationships/videoStream": {
      "get": {
        "tags": [
          "relationshipChannels"
        ],
        "summary": "Retrieves the related dataStream identity of an individual relationshipChannel's videoStream relationship.",
        "operationId": "getRelationshipChannelVideoStreamRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the relationshipChannel whose related dataStream identity to retrieve.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "int64"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found dataStream identity, or `null` if it was not found.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/dataStreamIdentifierResponseDocument"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The relationshipChannel does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      },
      "head": {
        "tags": [
          "relationshipChannels"
        ],
        "summary": "Retrieves the related dataStream identity of an individual relationshipChannel's videoStream relationship without returning it.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "headRelationshipChannelVideoStreamRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the relationshipChannel whose related dataStream identity to retrieve.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "int64"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "A list of ETags, resulting in HTTP status 304 without a body, if one of them matches the current fingerprint.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              "Content-Length": {
                "description": "Size of the HTTP response body, in bytes.",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "304": {
            "description": "The fingerprint of the HTTP response matches one of the ETags from the incoming If-None-Match header.",
            "headers": {
              "ETag": {
                "description": "A fingerprint of the HTTP response, which can be used in an If-None-Match header to only fetch changes.",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          },
          "404": {
            "description": "The relationshipChannel does not exist."
          }
        }
      },
      "patch": {
        "tags": [
          "relationshipChannels"
        ],
        "summary": "Assigns an existing dataStream to the videoStream relationship of an individual relationshipChannel.",
        "operationId": "patchRelationshipChannelVideoStreamRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the relationshipChannel whose videoStream relationship to assign.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The identity of the dataStream to assign to the videoStream relationship.",
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/toOneDataStreamInRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The videoStream relationship was successfully updated, which did not result in additional changes."
          },
          "400": {
            "description": "The request body is missing or malformed.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The relationshipChannel or a related resource does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "409": {
            "description": "The request body contains conflicting information or another resource with the same ID already exists.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      }
    },
    "/writeOnlyChannels": {
      "post": {
        "tags": [
          "writeOnlyChannels"
        ],
        "summary": "Creates a new writeOnlyChannel.",
        "operationId": "postWriteOnlyChannel",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          }
        ],
        "requestBody": {
          "description": "The attributes and relationships of the writeOnlyChannel to create.",
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/createWriteOnlyChannelRequestDocument"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The writeOnlyChannel was successfully created, which resulted in additional changes. The newly created writeOnlyChannel is returned.",
            "headers": {
              "Location": {
                "description": "The URL at which the newly created writeOnlyChannel can be retrieved.",
                "required": true,
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            },
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/writeOnlyChannelPrimaryResponseDocument"
                }
              }
            }
          },
          "204": {
            "description": "The writeOnlyChannel was successfully created, which did not result in additional changes."
          },
          "400": {
            "description": "The query string is invalid or the request body is missing or malformed.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "403": {
            "description": "Client-generated IDs cannot be used at this endpoint.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "A related resource does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "409": {
            "description": "The request body contains conflicting information or another resource with the same ID already exists.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "422": {
            "description": "Validation of the request body failed.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      }
    },
    "/writeOnlyChannels/{id}": {
      "patch": {
        "tags": [
          "writeOnlyChannels"
        ],
        "summary": "Updates an existing writeOnlyChannel.",
        "operationId": "patchWriteOnlyChannel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the writeOnlyChannel to update.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "int64"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": ""
            }
          }
        ],
        "requestBody": {
          "description": "The attributes and relationships of the writeOnlyChannel to update. Omitted fields are left unchanged.",
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/updateWriteOnlyChannelRequestDocument"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The writeOnlyChannel was successfully updated, which resulted in additional changes. The updated writeOnlyChannel is returned.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/writeOnlyChannelPrimaryResponseDocument"
                }
              }
            }
          },
          "204": {
            "description": "The writeOnlyChannel was successfully updated, which did not result in additional changes."
          },
          "400": {
            "description": "The query string is invalid or the request body is missing or malformed.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The writeOnlyChannel or a related resource does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "409": {
            "description": "A resource type or identifier in the request body is incompatible.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "422": {
            "description": "Validation of the request body failed.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "writeOnlyChannels"
        ],
        "summary": "Deletes an existing writeOnlyChannel by its identifier.",
        "operationId": "deleteWriteOnlyChannel",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the writeOnlyChannel to delete.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The writeOnlyChannel was successfully deleted."
          },
          "404": {
            "description": "The writeOnlyChannel does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      }
    },
    "/writeOnlyChannels/{id}/relationships/audioStreams": {
      "post": {
        "tags": [
          "writeOnlyChannels"
        ],
        "summary": "Adds existing dataStreams to the audioStreams relationship of an individual writeOnlyChannel.",
        "operationId": "postWriteOnlyChannelAudioStreamsRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the writeOnlyChannel to add dataStreams to.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The identities of the dataStreams to add to the audioStreams relationship.",
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/toManyDataStreamInRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The dataStreams were successfully added, which did not result in additional changes."
          },
          "400": {
            "description": "The request body is missing or malformed.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The writeOnlyChannel or a related resource does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "409": {
            "description": "The request body contains conflicting information or another resource with the same ID already exists.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "writeOnlyChannels"
        ],
        "summary": "Assigns existing dataStreams to the audioStreams relationship of an individual writeOnlyChannel.",
        "operationId": "patchWriteOnlyChannelAudioStreamsRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the writeOnlyChannel whose audioStreams relationship to assign.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The identities of the dataStreams to assign to the audioStreams relationship, or an empty array to clear the relationship.",
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/toManyDataStreamInRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The audioStreams relationship was successfully updated, which did not result in additional changes."
          },
          "400": {
            "description": "The request body is missing or malformed.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The writeOnlyChannel or a related resource does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "409": {
            "description": "The request body contains conflicting information or another resource with the same ID already exists.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "writeOnlyChannels"
        ],
        "summary": "Removes existing dataStreams from the audioStreams relationship of an individual writeOnlyChannel.",
        "operationId": "deleteWriteOnlyChannelAudioStreamsRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the writeOnlyChannel to remove dataStreams from.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The identities of the dataStreams to remove from the audioStreams relationship.",
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/toManyDataStreamInRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The dataStreams were successfully removed, which did not result in additional changes."
          },
          "400": {
            "description": "The request body is missing or malformed.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The writeOnlyChannel or a related resource does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "409": {
            "description": "The request body contains conflicting information or another resource with the same ID already exists.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      }
    },
    "/writeOnlyChannels/{id}/relationships/ultraHighDefinitionVideoStream": {
      "patch": {
        "tags": [
          "writeOnlyChannels"
        ],
        "summary": "Clears or assigns an existing dataStream to the ultraHighDefinitionVideoStream relationship of an individual writeOnlyChannel.",
        "operationId": "patchWriteOnlyChannelUltraHighDefinitionVideoStreamRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the writeOnlyChannel whose ultraHighDefinitionVideoStream relationship to assign or clear.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The identity of the dataStream to assign to the ultraHighDefinitionVideoStream relationship, or `null` to clear the relationship.",
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/nullableToOneDataStreamInRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The ultraHighDefinitionVideoStream relationship was successfully updated, which did not result in additional changes."
          },
          "400": {
            "description": "The request body is missing or malformed.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The writeOnlyChannel or a related resource does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "409": {
            "description": "The request body contains conflicting information or another resource with the same ID already exists.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      }
    },
    "/writeOnlyChannels/{id}/relationships/videoStream": {
      "patch": {
        "tags": [
          "writeOnlyChannels"
        ],
        "summary": "Assigns an existing dataStream to the videoStream relationship of an individual writeOnlyChannel.",
        "operationId": "patchWriteOnlyChannelVideoStreamRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the writeOnlyChannel whose videoStream relationship to assign.",
            "required": true,
            "schema": {
              "minLength": 1,
              "type": "string",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The identity of the dataStream to assign to the videoStream relationship.",
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/toOneDataStreamInRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The videoStream relationship was successfully updated, which did not result in additional changes."
          },
          "400": {
            "description": "The request body is missing or malformed.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "404": {
            "description": "The writeOnlyChannel or a related resource does not exist.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          },
          "409": {
            "description": "The request body contains conflicting information or another resource with the same ID already exists.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/errorResponseDocument"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "attributesInCreateWriteOnlyChannelRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "isCommercial": {
            "type": "boolean",
            "nullable": true
          },
          "isAdultOnly": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "attributesInUpdateWriteOnlyChannelRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "isCommercial": {
            "type": "boolean",
            "nullable": true
          },
          "isAdultOnly": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "createWriteOnlyChannelRequestDocument": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dataInCreateWriteOnlyChannelRequest"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "dataInCreateWriteOnlyChannelRequest": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/writeOnlyChannelResourceType"
              }
            ]
          },
          "attributes": {
            "allOf": [
              {
                "$ref": "#/components/schemas/attributesInCreateWriteOnlyChannelRequest"
              }
            ]
          },
          "relationships": {
            "allOf": [
              {
                "$ref": "#/components/schemas/relationshipsInCreateWriteOnlyChannelRequest"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "dataInResponse": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "dataStreams": "#/components/schemas/dataStreamDataInResponse",
            "readOnlyChannels": "#/components/schemas/readOnlyChannelDataInResponse",
            "readOnlyResourceChannels": "#/components/schemas/readOnlyResourceChannelDataInResponse",
            "writeOnlyChannels": "#/components/schemas/writeOnlyChannelDataInResponse"
          }
        },
        "x-abstract": true
      },
      "dataInUpdateWriteOnlyChannelRequest": {
        "required": [
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/writeOnlyChannelResourceType"
              }
            ]
          },
          "id": {
            "minLength": 1,
            "type": "string",
            "format": "int64"
          },
          "attributes": {
            "allOf": [
              {
                "$ref": "#/components/schemas/attributesInUpdateWriteOnlyChannelRequest"
              }
            ]
          },
          "relationships": {
            "allOf": [
              {
                "$ref": "#/components/schemas/relationshipsInUpdateWriteOnlyChannelRequest"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "dataStreamAttributesInResponse": {
        "type": "object",
        "properties": {
          "bytesTransmitted": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "dataStreamCollectionResponseDocument": {
        "required": [
          "data",
          "links"
        ],
        "type": "object",
        "properties": {
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/resourceCollectionTopLevelLinks"
              }
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dataStreamDataInResponse"
            }
          },
          "included": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dataInResponse"
            }
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/meta"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "dataStreamDataInResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/dataInResponse"
          },
          {
            "required": [
              "id"
            ],
            "type": "object",
            "properties": {
              "id": {
                "minLength": 1,
                "type": "string",
                "format": "int64"
              },
              "attributes": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/dataStreamAttributesInResponse"
                  }
                ]
              },
              "links": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/resourceLinks"
                  }
                ]
              },
              "meta": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/meta"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        ],
        "additionalProperties": false
      },
      "dataStreamIdentifierCollectionResponseDocument": {
        "required": [
          "data",
          "links"
        ],
        "type": "object",
        "properties": {
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/resourceIdentifierCollectionTopLevelLinks"
              }
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dataStreamIdentifierInResponse"
            }
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/meta"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "dataStreamIdentifierInRequest": {
        "required": [
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dataStreamResourceType"
              }
            ]
          },
          "id": {
            "minLength": 1,
            "type": "string",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "dataStreamIdentifierInResponse": {
        "required": [
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dataStreamResourceType"
              }
            ]
          },
          "id": {
            "minLength": 1,
            "type": "string",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "dataStreamIdentifierResponseDocument": {
        "required": [
          "data",
          "links"
        ],
        "type": "object",
        "properties": {
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/resourceIdentifierTopLevelLinks"
              }
            ]
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dataStreamIdentifierInResponse"
              }
            ]
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/meta"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "dataStreamPrimaryResponseDocument": {
        "required": [
          "data",
          "links"
        ],
        "type": "object",
        "properties": {
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/resourceTopLevelLinks"
              }
            ]
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dataStreamDataInResponse"
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dataInResponse"
            }
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/meta"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "dataStreamResourceType": {
        "enum": [
          "dataStreams"
        ],
        "type": "string",
        "additionalProperties": false
      },
      "dataStreamSecondaryResponseDocument": {
        "required": [
          "data",
          "links"
        ],
        "type": "object",
        "properties": {
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/resourceTopLevelLinks"
              }
            ]
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dataStreamDataInResponse"
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dataInResponse"
            }
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/meta"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "errorLinks": {
        "type": "object",
        "properties": {
          "about": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "errorObject": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/errorLinks"
              }
            ],
            "nullable": true
          },
          "status": {
            "type": "string"
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/errorSource"
              }
            ],
            "nullable": true
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/meta"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "errorResponseDocument": {
        "required": [
          "errors",
          "links"
        ],
        "type": "object",
        "properties": {
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/errorTopLevelLinks"
              }
            ]
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/errorObject"
            }
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/meta"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "errorSource": {
        "type": "object",
        "properties": {
          "pointer": {
            "type": "string",
            "nullable": true
          },
          "parameter": {
            "type": "string",
            "nullable": true
          },
          "header": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "errorTopLevelLinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string"
          },
          "describedby": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "meta": {
        "type": "object",
        "additionalProperties": {
          "nullable": true
        }
      },
      "nullableDataStreamIdentifierResponseDocument": {
        "required": [
          "data",
          "links"
        ],
        "type": "object",
        "properties": {
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/resourceIdentifierTopLevelLinks"
              }
            ]
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dataStreamIdentifierInResponse"
              }
            ],
            "nullable": true
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/meta"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "nullableDataStreamSecondaryResponseDocument": {
        "required": [
          "data",
          "links"
        ],
        "type": "object",
        "properties": {
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/resourceTopLevelLinks"
              }
            ]
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dataStreamDataInResponse"
              }
            ],
            "nullable": true
          },
          "included": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dataInResponse"
            }
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/meta"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "nullableToOneDataStreamInRequest": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dataStreamIdentifierInRequest"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "nullableToOneDataStreamInResponse": {
        "type": "object",
        "properties": {
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/relationshipLinks"
              }
            ]
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dataStreamIdentifierInResponse"
              }
            ],
            "nullable": true
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/meta"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "readOnlyChannelAttributesInResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "isCommercial": {
            "type": "boolean",
            "nullable": true
          },
          "isAdultOnly": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "readOnlyChannelCollectionResponseDocument": {
        "required": [
          "data",
          "links"
        ],
        "type": "object",
        "properties": {
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/resourceCollectionTopLevelLinks"
              }
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/readOnlyChannelDataInResponse"
            }
          },
          "included": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dataInResponse"
            }
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/meta"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "readOnlyChannelDataInResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/dataInResponse"
          },
          {
            "required": [
              "id"
            ],
            "type": "object",
            "properties": {
              "id": {
                "minLength": 1,
                "type": "string",
                "format": "int64"
              },
              "attributes": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/readOnlyChannelAttributesInResponse"
                  }
                ]
              },
              "relationships": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/readOnlyChannelRelationshipsInResponse"
                  }
                ]
              },
              "links": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/resourceLinks"
                  }
                ]
              },
              "meta": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/meta"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        ],
        "additionalProperties": false
      },
      "readOnlyChannelPrimaryResponseDocument": {
        "required": [
          "data",
          "links"
        ],
        "type": "object",
        "properties": {
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/resourceTopLevelLinks"
              }
            ]
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/readOnlyChannelDataInResponse"
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dataInResponse"
            }
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/meta"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "readOnlyChannelRelationshipsInResponse": {
        "type": "object",
        "properties": {
          "videoStream": {
            "allOf": [
              {
                "$ref": "#/components/schemas/toOneDataStreamInResponse"
              }
            ]
          },
          "ultraHighDefinitionVideoStream": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nullableToOneDataStreamInResponse"
              }
            ]
          },
          "audioStreams": {
            "allOf": [
              {
                "$ref": "#/components/schemas/toManyDataStreamInResponse"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "readOnlyResourceChannelAttributesInResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "isCommercial": {
            "type": "boolean",
            "nullable": true
          },
          "isAdultOnly": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "readOnlyResourceChannelCollectionResponseDocument": {
        "required": [
          "data",
          "links"
        ],
        "type": "object",
        "properties": {
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/resourceCollectionTopLevelLinks"
              }
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/readOnlyResourceChannelDataInResponse"
            }
          },
          "included": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dataInResponse"
            }
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/meta"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "readOnlyResourceChannelDataInResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/dataInResponse"
          },
          {
            "required": [
              "id"
            ],
            "type": "object",
            "properties": {
              "id": {
                "minLength": 1,
                "type": "string",
                "format": "int64"
              },
              "attributes": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/readOnlyResourceChannelAttributesInResponse"
                  }
                ]
              },
              "relationships": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/readOnlyResourceChannelRelationshipsInResponse"
                  }
                ]
              },
              "links": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/resourceLinks"
                  }
                ]
              },
              "meta": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/meta"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        ],
        "additionalProperties": false
      },
      "readOnlyResourceChannelPrimaryResponseDocument": {
        "required": [
          "data",
          "links"
        ],
        "type": "object",
        "properties": {
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/resourceTopLevelLinks"
              }
            ]
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/readOnlyResourceChannelDataInResponse"
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dataInResponse"
            }
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/meta"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "readOnlyResourceChannelRelationshipsInResponse": {
        "type": "object",
        "properties": {
          "videoStream": {
            "allOf": [
              {
                "$ref": "#/components/schemas/toOneDataStreamInResponse"
              }
            ]
          },
          "ultraHighDefinitionVideoStream": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nullableToOneDataStreamInResponse"
              }
            ]
          },
          "audioStreams": {
            "allOf": [
              {
                "$ref": "#/components/schemas/toManyDataStreamInResponse"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "relationshipLinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string"
          },
          "related": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "relationshipsInCreateWriteOnlyChannelRequest": {
        "required": [
          "videoStream"
        ],
        "type": "object",
        "properties": {
          "videoStream": {
            "allOf": [
              {
                "$ref": "#/components/schemas/toOneDataStreamInRequest"
              }
            ]
          },
          "ultraHighDefinitionVideoStream": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nullableToOneDataStreamInRequest"
              }
            ]
          },
          "audioStreams": {
            "allOf": [
              {
                "$ref": "#/components/schemas/toManyDataStreamInRequest"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "relationshipsInUpdateWriteOnlyChannelRequest": {
        "type": "object",
        "properties": {
          "videoStream": {
            "allOf": [
              {
                "$ref": "#/components/schemas/toOneDataStreamInRequest"
              }
            ]
          },
          "ultraHighDefinitionVideoStream": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nullableToOneDataStreamInRequest"
              }
            ]
          },
          "audioStreams": {
            "allOf": [
              {
                "$ref": "#/components/schemas/toManyDataStreamInRequest"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "resourceCollectionTopLevelLinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string"
          },
          "describedby": {
            "type": "string"
          },
          "first": {
            "type": "string"
          },
          "last": {
            "type": "string"
          },
          "prev": {
            "type": "string"
          },
          "next": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "resourceIdentifierCollectionTopLevelLinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string"
          },
          "related": {
            "type": "string"
          },
          "describedby": {
            "type": "string"
          },
          "first": {
            "type": "string"
          },
          "last": {
            "type": "string"
          },
          "prev": {
            "type": "string"
          },
          "next": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "resourceIdentifierTopLevelLinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string"
          },
          "related": {
            "type": "string"
          },
          "describedby": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "resourceLinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "resourceTopLevelLinks": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string"
          },
          "describedby": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "toManyDataStreamInRequest": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dataStreamIdentifierInRequest"
            }
          }
        },
        "additionalProperties": false
      },
      "toManyDataStreamInResponse": {
        "type": "object",
        "properties": {
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/relationshipLinks"
              }
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dataStreamIdentifierInResponse"
            }
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/meta"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "toOneDataStreamInRequest": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dataStreamIdentifierInRequest"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "toOneDataStreamInResponse": {
        "type": "object",
        "properties": {
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/relationshipLinks"
              }
            ]
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dataStreamIdentifierInResponse"
              }
            ]
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/meta"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "updateWriteOnlyChannelRequestDocument": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dataInUpdateWriteOnlyChannelRequest"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "writeOnlyChannelAttributesInResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "isCommercial": {
            "type": "boolean",
            "nullable": true
          },
          "isAdultOnly": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "writeOnlyChannelDataInResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/dataInResponse"
          },
          {
            "required": [
              "id"
            ],
            "type": "object",
            "properties": {
              "id": {
                "minLength": 1,
                "type": "string",
                "format": "int64"
              },
              "attributes": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/writeOnlyChannelAttributesInResponse"
                  }
                ]
              },
              "relationships": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/writeOnlyChannelRelationshipsInResponse"
                  }
                ]
              },
              "links": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/resourceLinks"
                  }
                ]
              },
              "meta": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/meta"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        ],
        "additionalProperties": false
      },
      "writeOnlyChannelPrimaryResponseDocument": {
        "required": [
          "data",
          "links"
        ],
        "type": "object",
        "properties": {
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/resourceTopLevelLinks"
              }
            ]
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/writeOnlyChannelDataInResponse"
              }
            ]
          },
          "included": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dataInResponse"
            }
          },
          "meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/meta"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "writeOnlyChannelRelationshipsInResponse": {
        "type": "object",
        "properties": {
          "videoStream": {
            "allOf": [
              {
                "$ref": "#/components/schemas/toOneDataStreamInResponse"
              }
            ]
          },
          "ultraHighDefinitionVideoStream": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nullableToOneDataStreamInResponse"
              }
            ]
          },
          "audioStreams": {
            "allOf": [
              {
                "$ref": "#/components/schemas/toManyDataStreamInResponse"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "writeOnlyChannelResourceType": {
        "enum": [
          "writeOnlyChannels"
        ],
        "type": "string",
        "additionalProperties": false
      }
    }
  }
}