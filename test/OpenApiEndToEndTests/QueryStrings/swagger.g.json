{
  "openapi": "3.0.1",
  "info": {
    "title": "OpenApiTests",
    "version": "1.0"
  },
  "paths": {
    "/nodes": {
      "get": {
        "tags": [
          "nodes"
        ],
        "summary": "Retrieves a collection of nodes.",
        "operationId": "getNodeCollection",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found nodes, or an empty array if none were found.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/nodeCollectionResponseDocument"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          }
        }
      },
      "head": {
        "tags": [
          "nodes"
        ],
        "summary": "Retrieves a collection of nodes without returning them.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "headNodeCollection",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully."
          },
          "400": {
            "description": "The query string is invalid."
          }
        }
      },
      "post": {
        "tags": [
          "nodes"
        ],
        "summary": "Creates a new node.",
        "operationId": "postNode",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "The attributes and relationships of the node to create.",
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/nodePostRequestDocument"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The node was successfully created, which resulted in additional changes. The newly created node is returned.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/nodePrimaryResponseDocument"
                }
              }
            }
          },
          "204": {
            "description": "The node was successfully created, which did not result in additional changes."
          },
          "400": {
            "description": "The query string is invalid or the request body is missing or malformed."
          },
          "403": {
            "description": "Client-generated IDs cannot be used at this endpoint."
          },
          "409": {
            "description": "A resource type in the request body is incompatible."
          },
          "422": {
            "description": "Validation of the request body failed."
          }
        }
      }
    },
    "/nodes/{id}": {
      "get": {
        "tags": [
          "nodes"
        ],
        "summary": "Retrieves an individual node by its identifier.",
        "operationId": "getNode",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the node to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found node.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/nodePrimaryResponseDocument"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          },
          "404": {
            "description": "The node does not exist."
          }
        }
      },
      "head": {
        "tags": [
          "nodes"
        ],
        "summary": "Retrieves an individual node by its identifier without returning it.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "headNode",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the node to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully."
          },
          "400": {
            "description": "The query string is invalid."
          },
          "404": {
            "description": "The node does not exist."
          }
        }
      },
      "patch": {
        "tags": [
          "nodes"
        ],
        "summary": "Updates an existing node.",
        "operationId": "patchNode",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the node to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": null
            }
          }
        ],
        "requestBody": {
          "description": "The attributes and relationships of the node to update. Omitted fields are left unchanged.",
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/nodePatchRequestDocument"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The node was successfully updated, which resulted in additional changes. The updated node is returned.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/nodePrimaryResponseDocument"
                }
              }
            }
          },
          "204": {
            "description": "The node was successfully updated, which did not result in additional changes."
          },
          "400": {
            "description": "The query string is invalid or the request body is missing or malformed."
          },
          "404": {
            "description": "The node or a related resource does not exist."
          },
          "409": {
            "description": "A resource type or identifier in the request body is incompatible."
          },
          "422": {
            "description": "Validation of the request body failed."
          }
        }
      },
      "delete": {
        "tags": [
          "nodes"
        ],
        "summary": "Deletes an existing node by its identifier.",
        "operationId": "deleteNode",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the node to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The node was successfully deleted."
          },
          "404": {
            "description": "The node does not exist."
          }
        }
      }
    },
    "/nodes/{id}/children": {
      "get": {
        "tags": [
          "nodes"
        ],
        "summary": "Retrieves the related nodes of an individual node's children relationship.",
        "operationId": "getNodeChildren",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the node whose related nodes to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found nodes, or an empty array if none were found.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/nodeCollectionResponseDocument"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          },
          "404": {
            "description": "The node does not exist."
          }
        }
      },
      "head": {
        "tags": [
          "nodes"
        ],
        "summary": "Retrieves the related nodes of an individual node's children relationship without returning them.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "headNodeChildren",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the node whose related nodes to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully."
          },
          "400": {
            "description": "The query string is invalid."
          },
          "404": {
            "description": "The node does not exist."
          }
        }
      }
    },
    "/nodes/{id}/relationships/children": {
      "get": {
        "tags": [
          "nodes"
        ],
        "summary": "Retrieves the related node identities of an individual node's children relationship.",
        "operationId": "getNodeChildrenRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the node whose related node identities to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found node identities, or an empty array if none were found.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/nodeIdentifierCollectionResponseDocument"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          },
          "404": {
            "description": "The node does not exist."
          }
        }
      },
      "head": {
        "tags": [
          "nodes"
        ],
        "summary": "Retrieves the related node identities of an individual node's children relationship without returning them.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "headNodeChildrenRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the node whose related node identities to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully."
          },
          "400": {
            "description": "The query string is invalid."
          },
          "404": {
            "description": "The node does not exist."
          }
        }
      },
      "post": {
        "tags": [
          "nodes"
        ],
        "summary": "Adds existing nodes to the children relationship of an individual node.",
        "operationId": "postNodeChildrenRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the node to add nodes to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The identities of the nodes to add to the children relationship.",
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/toManyNodeInRequest"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The nodes were successfully added, which did not result in additional changes."
          },
          "400": {
            "description": "The request body is missing or malformed."
          },
          "404": {
            "description": "The node does not exist."
          },
          "409": {
            "description": "A resource type in the request body is incompatible."
          }
        }
      },
      "patch": {
        "tags": [
          "nodes"
        ],
        "summary": "Assigns existing nodes to the children relationship of an individual node.",
        "operationId": "patchNodeChildrenRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the node whose children relationship to assign.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The identities of the nodes to assign to the children relationship, or an empty array to clear the relationship.",
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/toManyNodeInRequest"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The children relationship was successfully updated, which did not result in additional changes."
          },
          "400": {
            "description": "The request body is missing or malformed."
          },
          "404": {
            "description": "The node does not exist."
          },
          "409": {
            "description": "A resource type in the request body is incompatible."
          }
        }
      },
      "delete": {
        "tags": [
          "nodes"
        ],
        "summary": "Removes existing nodes from the children relationship of an individual node.",
        "operationId": "deleteNodeChildrenRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the node to remove nodes from.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The identities of the nodes to remove from the children relationship.",
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/toManyNodeInRequest"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The nodes were successfully removed, which did not result in additional changes."
          },
          "400": {
            "description": "The request body is missing or malformed."
          },
          "404": {
            "description": "The node does not exist."
          },
          "409": {
            "description": "A resource type in the request body is incompatible."
          }
        }
      }
    },
    "/nodes/{id}/parent": {
      "get": {
        "tags": [
          "nodes"
        ],
        "summary": "Retrieves the related node of an individual node's parent relationship.",
        "operationId": "getNodeParent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the node whose related node to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found node, or `null` if it was not found.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/nullableNodeSecondaryResponseDocument"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          },
          "404": {
            "description": "The node does not exist."
          }
        }
      },
      "head": {
        "tags": [
          "nodes"
        ],
        "summary": "Retrieves the related node of an individual node's parent relationship without returning it.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "headNodeParent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the node whose related node to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully."
          },
          "400": {
            "description": "The query string is invalid."
          },
          "404": {
            "description": "The node does not exist."
          }
        }
      }
    },
    "/nodes/{id}/relationships/parent": {
      "get": {
        "tags": [
          "nodes"
        ],
        "summary": "Retrieves the related node identity of an individual node's parent relationship.",
        "operationId": "getNodeParentRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the node whose related node identity to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returns the found node identity, or `null` if it was not found.",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/nullableNodeIdentifierResponseDocument"
                }
              }
            }
          },
          "400": {
            "description": "The query string is invalid."
          },
          "404": {
            "description": "The node does not exist."
          }
        }
      },
      "head": {
        "tags": [
          "nodes"
        ],
        "summary": "Retrieves the related node identity of an individual node's parent relationship without returning it.",
        "description": "Compare the returned ETag HTTP header with an earlier one to determine if the response has changed since it was fetched.",
        "operationId": "headNodeParentRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the node whose related node identity to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "For syntax, see the documentation for the [`include`](https://www.jsonapi.net/usage/reading/including-relationships.html)/[`filter`](https://www.jsonapi.net/usage/reading/filtering.html)/[`sort`](https://www.jsonapi.net/usage/reading/sorting.html)/[`page`](https://www.jsonapi.net/usage/reading/pagination.html)/[`fields`](https://www.jsonapi.net/usage/reading/sparse-fieldset-selection.html) query string parameters.",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string",
                "nullable": true
              },
              "example": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The operation completed successfully."
          },
          "400": {
            "description": "The query string is invalid."
          },
          "404": {
            "description": "The node does not exist."
          }
        }
      },
      "patch": {
        "tags": [
          "nodes"
        ],
        "summary": "Clears or assigns an existing node to the parent relationship of an individual node.",
        "operationId": "patchNodeParentRelationship",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier of the node whose parent relationship to assign or clear.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The identity of the node to assign to the parent relationship, or `null` to clear the relationship.",
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/nullableToOneNodeInRequest"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The parent relationship was successfully updated, which did not result in additional changes."
          },
          "400": {
            "description": "The request body is missing or malformed."
          },
          "404": {
            "description": "The node does not exist."
          },
          "409": {
            "description": "A resource type in the request body is incompatible."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "linksInRelationshipObject": {
        "required": [
          "related",
          "self"
        ],
        "type": "object",
        "properties": {
          "self": {
            "minLength": 1,
            "type": "string"
          },
          "related": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "linksInResourceCollectionDocument": {
        "required": [
          "self"
        ],
        "type": "object",
        "properties": {
          "self": {
            "minLength": 1,
            "type": "string"
          },
          "describedby": {
            "type": "string"
          },
          "first": {
            "type": "string"
          },
          "last": {
            "type": "string"
          },
          "prev": {
            "type": "string"
          },
          "next": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "linksInResourceDocument": {
        "required": [
          "self"
        ],
        "type": "object",
        "properties": {
          "self": {
            "minLength": 1,
            "type": "string"
          },
          "describedby": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "linksInResourceIdentifierCollectionDocument": {
        "required": [
          "related",
          "self"
        ],
        "type": "object",
        "properties": {
          "self": {
            "minLength": 1,
            "type": "string"
          },
          "related": {
            "minLength": 1,
            "type": "string"
          },
          "describedby": {
            "type": "string"
          },
          "first": {
            "type": "string"
          },
          "last": {
            "type": "string"
          },
          "prev": {
            "type": "string"
          },
          "next": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "linksInResourceIdentifierDocument": {
        "required": [
          "related",
          "self"
        ],
        "type": "object",
        "properties": {
          "self": {
            "minLength": 1,
            "type": "string"
          },
          "related": {
            "minLength": 1,
            "type": "string"
          },
          "describedby": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "linksInResourceObject": {
        "required": [
          "self"
        ],
        "type": "object",
        "properties": {
          "self": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "nodeAttributesInPatchRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "comment": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "nodeAttributesInPostRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "comment": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "nodeAttributesInResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "comment": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "nodeCollectionResponseDocument": {
        "required": [
          "data",
          "links"
        ],
        "type": "object",
        "properties": {
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/linksInResourceCollectionDocument"
              }
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/nodeDataInResponse"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "nullable": true
            }
          }
        },
        "additionalProperties": false
      },
      "nodeDataInPatchRequest": {
        "required": [
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nodeResourceType"
              }
            ]
          },
          "id": {
            "minLength": 1,
            "type": "string"
          },
          "attributes": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nodeAttributesInPatchRequest"
              }
            ]
          },
          "relationships": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nodeRelationshipsInPatchRequest"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "nodeDataInPostRequest": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nodeResourceType"
              }
            ]
          },
          "attributes": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nodeAttributesInPostRequest"
              }
            ]
          },
          "relationships": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nodeRelationshipsInPostRequest"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "nodeDataInResponse": {
        "required": [
          "id",
          "links",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nodeResourceType"
              }
            ]
          },
          "id": {
            "minLength": 1,
            "type": "string"
          },
          "attributes": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nodeAttributesInResponse"
              }
            ]
          },
          "relationships": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nodeRelationshipsInResponse"
              }
            ]
          },
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/linksInResourceObject"
              }
            ]
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "nullable": true
            }
          }
        },
        "additionalProperties": false
      },
      "nodeIdentifier": {
        "required": [
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nodeResourceType"
              }
            ]
          },
          "id": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "nodeIdentifierCollectionResponseDocument": {
        "required": [
          "data",
          "links"
        ],
        "type": "object",
        "properties": {
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/linksInResourceIdentifierCollectionDocument"
              }
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/nodeIdentifier"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "nullable": true
            }
          }
        },
        "additionalProperties": false
      },
      "nodePatchRequestDocument": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nodeDataInPatchRequest"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "nodePostRequestDocument": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nodeDataInPostRequest"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "nodePrimaryResponseDocument": {
        "required": [
          "data",
          "links"
        ],
        "type": "object",
        "properties": {
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/linksInResourceDocument"
              }
            ]
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nodeDataInResponse"
              }
            ]
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "nullable": true
            }
          }
        },
        "additionalProperties": false
      },
      "nodeRelationshipsInPatchRequest": {
        "type": "object",
        "properties": {
          "parent": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nullableToOneNodeInRequest"
              }
            ]
          },
          "children": {
            "allOf": [
              {
                "$ref": "#/components/schemas/toManyNodeInRequest"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "nodeRelationshipsInPostRequest": {
        "type": "object",
        "properties": {
          "parent": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nullableToOneNodeInRequest"
              }
            ]
          },
          "children": {
            "allOf": [
              {
                "$ref": "#/components/schemas/toManyNodeInRequest"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "nodeRelationshipsInResponse": {
        "type": "object",
        "properties": {
          "parent": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nullableToOneNodeInResponse"
              }
            ]
          },
          "children": {
            "allOf": [
              {
                "$ref": "#/components/schemas/toManyNodeInResponse"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "nodeResourceType": {
        "enum": [
          "nodes"
        ],
        "type": "string",
        "additionalProperties": false
      },
      "nullableNodeIdentifierResponseDocument": {
        "required": [
          "data",
          "links"
        ],
        "type": "object",
        "properties": {
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/linksInResourceIdentifierDocument"
              }
            ]
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nodeIdentifier"
              }
            ],
            "nullable": true
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "nullable": true
            }
          }
        },
        "additionalProperties": false
      },
      "nullableNodeSecondaryResponseDocument": {
        "required": [
          "data",
          "links"
        ],
        "type": "object",
        "properties": {
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/linksInResourceDocument"
              }
            ]
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nodeDataInResponse"
              }
            ],
            "nullable": true
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "nullable": true
            }
          }
        },
        "additionalProperties": false
      },
      "nullableToOneNodeInRequest": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nodeIdentifier"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "nullableToOneNodeInResponse": {
        "required": [
          "links"
        ],
        "type": "object",
        "properties": {
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/linksInRelationshipObject"
              }
            ]
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nodeIdentifier"
              }
            ],
            "nullable": true
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "nullable": true
            }
          }
        },
        "additionalProperties": false
      },
      "toManyNodeInRequest": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/nodeIdentifier"
            }
          }
        },
        "additionalProperties": false
      },
      "toManyNodeInResponse": {
        "required": [
          "links"
        ],
        "type": "object",
        "properties": {
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/linksInRelationshipObject"
              }
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/nodeIdentifier"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "nullable": true
            }
          }
        },
        "additionalProperties": false
      }
    }
  }
}