//#define HANDLE_CLIENT_SIDE

using JetBrains.Annotations;
using Microsoft.EntityFrameworkCore;

// @formatter:wrap_chained_method_calls chop_always

namespace JsonApiDotNetCoreTests.IntegrationTests.DeleteBehaviors.Relationships.Required;

[UsedImplicitly(ImplicitUseTargetFlags.Members)]
public class BloggingDbContext : DbContext
{
    public DbSet<Blog> Blogs => Set<Blog>();
    public DbSet<Post> Posts => Set<Post>();
    public DbSet<Person> People => Set<Person>();

    public BloggingDbContext(DbContextOptions<BloggingDbContext> options)
        : base(options)
    {
    }

    protected override void OnModelCreating(ModelBuilder builder)
    {
        builder.Entity<Post>()
            .HasOne(post => post.Blog)
            .WithMany(blog => blog.Posts)
            .HasForeignKey("BlogId")
#if HANDLE_CLIENT_SIDE
            .OnDelete(DeleteBehavior.ClientCascade)
#else
            .OnDelete(DeleteBehavior.Cascade)
#endif
            ;

        builder.Entity<Post>()
            .HasOne(post => post.Author)
            .WithMany(person => person.Posts)
            .HasForeignKey("AuthorId")
#if HANDLE_CLIENT_SIDE
            .OnDelete(DeleteBehavior.ClientCascade)
#else
            .OnDelete(DeleteBehavior.Cascade)
#endif
            ;

        builder.Entity<Blog>()
            .HasOne(blog => blog.Owner)
            .WithOne(person => person.OwnedBlog)
            .HasForeignKey<Blog>("OwnerId")
#if HANDLE_CLIENT_SIDE
            .OnDelete(DeleteBehavior.ClientCascade)
#else
            .OnDelete(DeleteBehavior.Cascade)
#endif
            ;

        // Generated SQL:
        /*

          CREATE TABLE "People" (
              "Id" integer GENERATED BY DEFAULT AS IDENTITY,
              "Name" text NOT NULL,
              CONSTRAINT "PK_People" PRIMARY KEY ("Id")
          );

          CREATE TABLE "Blogs" (
              "Id" integer GENERATED BY DEFAULT AS IDENTITY,
              "Name" text NOT NULL,
              "OwnerId" integer NOT NULL,
              CONSTRAINT "PK_Blogs" PRIMARY KEY ("Id"),
              CONSTRAINT "FK_Blogs_People_OwnerId" FOREIGN KEY ("OwnerId") REFERENCES "People" ("Id") ON DELETE CASCADE
          );

          CREATE TABLE "Posts" (
              "Id" integer GENERATED BY DEFAULT AS IDENTITY,
              "Title" text NOT NULL,
              "Content" text NOT NULL,
              "BlogId" integer NOT NULL,
              "AuthorId" integer NOT NULL,
              CONSTRAINT "PK_Posts" PRIMARY KEY ("Id"),
              CONSTRAINT "FK_Posts_Blogs_BlogId" FOREIGN KEY ("BlogId") REFERENCES "Blogs" ("Id") ON DELETE CASCADE,
              CONSTRAINT "FK_Posts_People_AuthorId" FOREIGN KEY ("AuthorId") REFERENCES "People" ("Id") ON DELETE CASCADE
          );

          CREATE UNIQUE INDEX "IX_Blogs_OwnerId" ON "Blogs" ("OwnerId");

          CREATE INDEX "IX_Posts_AuthorId" ON "Posts" ("AuthorId");

          CREATE INDEX "IX_Posts_BlogId" ON "Posts" ("BlogId");

        */
    }
}
