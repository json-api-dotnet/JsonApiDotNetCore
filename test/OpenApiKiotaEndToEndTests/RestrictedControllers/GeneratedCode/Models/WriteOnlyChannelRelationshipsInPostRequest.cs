// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions.Store;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace OpenApiKiotaEndToEndTests.RestrictedControllers.GeneratedCode.Models {
    public class WriteOnlyChannelRelationshipsInPostRequest : IBackedModel, IParsable {
        /// <summary>The audioStreams property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ToManyDataStreamInRequest? AudioStreams {
            get { return BackingStore?.Get<ToManyDataStreamInRequest?>("audioStreams"); }
            set { BackingStore?.Set("audioStreams", value); }
        }
#nullable restore
#else
        public ToManyDataStreamInRequest AudioStreams {
            get { return BackingStore?.Get<ToManyDataStreamInRequest>("audioStreams"); }
            set { BackingStore?.Set("audioStreams", value); }
        }
#endif
        /// <summary>Stores model information.</summary>
        public IBackingStore BackingStore { get; private set; }
        /// <summary>The ultraHighDefinitionVideoStream property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public NullableToOneDataStreamInRequest? UltraHighDefinitionVideoStream {
            get { return BackingStore?.Get<NullableToOneDataStreamInRequest?>("ultraHighDefinitionVideoStream"); }
            set { BackingStore?.Set("ultraHighDefinitionVideoStream", value); }
        }
#nullable restore
#else
        public NullableToOneDataStreamInRequest UltraHighDefinitionVideoStream {
            get { return BackingStore?.Get<NullableToOneDataStreamInRequest>("ultraHighDefinitionVideoStream"); }
            set { BackingStore?.Set("ultraHighDefinitionVideoStream", value); }
        }
#endif
        /// <summary>The videoStream property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ToOneDataStreamInRequest? VideoStream {
            get { return BackingStore?.Get<ToOneDataStreamInRequest?>("videoStream"); }
            set { BackingStore?.Set("videoStream", value); }
        }
#nullable restore
#else
        public ToOneDataStreamInRequest VideoStream {
            get { return BackingStore?.Get<ToOneDataStreamInRequest>("videoStream"); }
            set { BackingStore?.Set("videoStream", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new writeOnlyChannelRelationshipsInPostRequest and sets the default values.
        /// </summary>
        public WriteOnlyChannelRelationshipsInPostRequest() {
            BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static WriteOnlyChannelRelationshipsInPostRequest CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new WriteOnlyChannelRelationshipsInPostRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"audioStreams", n => { AudioStreams = n.GetObjectValue<ToManyDataStreamInRequest>(ToManyDataStreamInRequest.CreateFromDiscriminatorValue); } },
                {"ultraHighDefinitionVideoStream", n => { UltraHighDefinitionVideoStream = n.GetObjectValue<NullableToOneDataStreamInRequest>(NullableToOneDataStreamInRequest.CreateFromDiscriminatorValue); } },
                {"videoStream", n => { VideoStream = n.GetObjectValue<ToOneDataStreamInRequest>(ToOneDataStreamInRequest.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<ToManyDataStreamInRequest>("audioStreams", AudioStreams);
            writer.WriteObjectValue<NullableToOneDataStreamInRequest>("ultraHighDefinitionVideoStream", UltraHighDefinitionVideoStream);
            writer.WriteObjectValue<ToOneDataStreamInRequest>("videoStream", VideoStream);
        }
    }
}
