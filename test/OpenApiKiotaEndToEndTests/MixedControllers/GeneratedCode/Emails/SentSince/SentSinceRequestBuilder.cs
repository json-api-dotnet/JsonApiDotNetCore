// <auto-generated/>
#nullable enable
#pragma warning disable CS8625
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using OpenApiKiotaEndToEndTests.MixedControllers.GeneratedCode.Models;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace OpenApiKiotaEndToEndTests.MixedControllers.GeneratedCode.Emails.SentSince
{
    /// <summary>
    /// Builds and executes requests for operations under \emails\sent-since
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SentSinceRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::OpenApiKiotaEndToEndTests.MixedControllers.GeneratedCode.Emails.SentSince.SentSinceRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SentSinceRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/emails/sent-since?sinceUtc={sinceUtc}", pathParameters)
        {
        }

        /// <summary>
        /// Instantiates a new <see cref="global::OpenApiKiotaEndToEndTests.MixedControllers.GeneratedCode.Emails.SentSince.SentSinceRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public SentSinceRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/emails/sent-since?sinceUtc={sinceUtc}", rawUrl)
        {
        }

        /// <summary>
        /// Gets all emails sent since the specified date/time.
        /// </summary>
        /// <returns>A List&lt;global::OpenApiKiotaEndToEndTests.MixedControllers.GeneratedCode.Models.Email&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::OpenApiKiotaEndToEndTests.MixedControllers.GeneratedCode.Models.HttpValidationProblemDetails">When receiving a 400 status code</exception>
        public async Task<List<global::OpenApiKiotaEndToEndTests.MixedControllers.GeneratedCode.Models.Email>?> GetAsync(Action<RequestConfiguration<global::OpenApiKiotaEndToEndTests.MixedControllers.GeneratedCode.Emails.SentSince.SentSinceRequestBuilder.SentSinceRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::OpenApiKiotaEndToEndTests.MixedControllers.GeneratedCode.Models.HttpValidationProblemDetails.CreateFromDiscriminatorValue },
            };
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::OpenApiKiotaEndToEndTests.MixedControllers.GeneratedCode.Models.Email>(requestInfo, global::OpenApiKiotaEndToEndTests.MixedControllers.GeneratedCode.Models.Email.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }

        /// <summary>
        /// Gets all emails sent since the specified date/time.
        /// </summary>
        /// <returns>A <see cref="Stream"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        public async Task<Stream?> HeadAsync(Action<RequestConfiguration<global::OpenApiKiotaEndToEndTests.MixedControllers.GeneratedCode.Emails.SentSince.SentSinceRequestBuilder.SentSinceRequestBuilderHeadQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
            var requestInfo = ToHeadRequestInformation(requestConfiguration);
            return await RequestAdapter.SendPrimitiveAsync<Stream>(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets all emails sent since the specified date/time.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::OpenApiKiotaEndToEndTests.MixedControllers.GeneratedCode.Emails.SentSince.SentSinceRequestBuilder.SentSinceRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }

        /// <summary>
        /// Gets all emails sent since the specified date/time.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        public RequestInformation ToHeadRequestInformation(Action<RequestConfiguration<global::OpenApiKiotaEndToEndTests.MixedControllers.GeneratedCode.Emails.SentSince.SentSinceRequestBuilder.SentSinceRequestBuilderHeadQueryParameters>>? requestConfiguration = default)
        {
            var requestInfo = new RequestInformation(Method.HEAD, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            return requestInfo;
        }

        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::OpenApiKiotaEndToEndTests.MixedControllers.GeneratedCode.Emails.SentSince.SentSinceRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::OpenApiKiotaEndToEndTests.MixedControllers.GeneratedCode.Emails.SentSince.SentSinceRequestBuilder WithUrl(string rawUrl)
        {
            return new global::OpenApiKiotaEndToEndTests.MixedControllers.GeneratedCode.Emails.SentSince.SentSinceRequestBuilder(rawUrl, RequestAdapter);
        }

        /// <summary>
        /// Gets all emails sent since the specified date/time.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SentSinceRequestBuilderGetQueryParameters 
        {
            /// <summary>The date/time (in UTC) since which the email was sent.</summary>
            [QueryParameter("sinceUtc")]
            public DateTimeOffset? SinceUtc { get; set; }
        }

        /// <summary>
        /// Gets all emails sent since the specified date/time.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class SentSinceRequestBuilderHeadQueryParameters 
        {
            /// <summary>The date/time (in UTC) since which the email was sent.</summary>
            [QueryParameter("sinceUtc")]
            public DateTimeOffset? SinceUtc { get; set; }
        }
    }
}
#pragma warning restore CS0618
