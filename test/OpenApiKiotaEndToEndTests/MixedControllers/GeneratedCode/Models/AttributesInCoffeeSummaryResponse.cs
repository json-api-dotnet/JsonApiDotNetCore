// <auto-generated/>
#nullable enable
#pragma warning disable CS8625
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace OpenApiKiotaEndToEndTests.MixedControllers.GeneratedCode.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class AttributesInCoffeeSummaryResponse : global::OpenApiKiotaEndToEndTests.MixedControllers.GeneratedCode.Models.AttributesInResponse, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The blackCount property</summary>
        public int? BlackCount
        {
            get { return BackingStore?.Get<int?>("blackCount"); }
            set { BackingStore?.Set("blackCount", value); }
        }

        /// <summary>The onlyMilkCount property</summary>
        public int? OnlyMilkCount
        {
            get { return BackingStore?.Get<int?>("onlyMilkCount"); }
            set { BackingStore?.Set("onlyMilkCount", value); }
        }

        /// <summary>The onlySugarCount property</summary>
        public int? OnlySugarCount
        {
            get { return BackingStore?.Get<int?>("onlySugarCount"); }
            set { BackingStore?.Set("onlySugarCount", value); }
        }

        /// <summary>The sugarWithMilkCount property</summary>
        public int? SugarWithMilkCount
        {
            get { return BackingStore?.Get<int?>("sugarWithMilkCount"); }
            set { BackingStore?.Set("sugarWithMilkCount", value); }
        }

        /// <summary>The totalCount property</summary>
        public int? TotalCount
        {
            get { return BackingStore?.Get<int?>("totalCount"); }
            set { BackingStore?.Set("totalCount", value); }
        }

        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::OpenApiKiotaEndToEndTests.MixedControllers.GeneratedCode.Models.AttributesInCoffeeSummaryResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::OpenApiKiotaEndToEndTests.MixedControllers.GeneratedCode.Models.AttributesInCoffeeSummaryResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::OpenApiKiotaEndToEndTests.MixedControllers.GeneratedCode.Models.AttributesInCoffeeSummaryResponse();
        }

        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "blackCount", n => { BlackCount = n.GetIntValue(); } },
                { "onlyMilkCount", n => { OnlyMilkCount = n.GetIntValue(); } },
                { "onlySugarCount", n => { OnlySugarCount = n.GetIntValue(); } },
                { "sugarWithMilkCount", n => { SugarWithMilkCount = n.GetIntValue(); } },
                { "totalCount", n => { TotalCount = n.GetIntValue(); } },
            };
        }

        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteIntValue("blackCount", BlackCount);
            writer.WriteIntValue("onlyMilkCount", OnlyMilkCount);
            writer.WriteIntValue("onlySugarCount", OnlySugarCount);
            writer.WriteIntValue("sugarWithMilkCount", SugarWithMilkCount);
            writer.WriteIntValue("totalCount", TotalCount);
        }
    }
}
#pragma warning restore CS0618
