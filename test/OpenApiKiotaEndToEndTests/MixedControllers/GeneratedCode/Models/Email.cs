// <auto-generated/>
#nullable enable
#pragma warning disable CS8625
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions.Store;
using System.Collections.Generic;
using System.IO;
using System;
namespace OpenApiKiotaEndToEndTests.MixedControllers.GeneratedCode.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Email : IBackedModel, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores model information.</summary>
        public IBackingStore BackingStore { get; private set; }

        /// <summary>The email body.</summary>
        public string? Body
        {
            get { return BackingStore?.Get<string?>("body"); }
            set { BackingStore?.Set("body", value); }
        }

        /// <summary>The email address of the sender.</summary>
        public string? From
        {
            get { return BackingStore?.Get<string?>("from"); }
            set { BackingStore?.Set("from", value); }
        }

        /// <summary>The date/time (in UTC) at which this email was sent.</summary>
        public DateTimeOffset? SentAtUtc
        {
            get { return BackingStore?.Get<DateTimeOffset?>("sentAtUtc"); }
            set { BackingStore?.Set("sentAtUtc", value); }
        }

        /// <summary>The email subject.</summary>
        public string? Subject
        {
            get { return BackingStore?.Get<string?>("subject"); }
            set { BackingStore?.Set("subject", value); }
        }

        /// <summary>The email address of the recipient.</summary>
        public string? To
        {
            get { return BackingStore?.Get<string?>("to"); }
            set { BackingStore?.Set("to", value); }
        }

        /// <summary>
        /// Instantiates a new <see cref="global::OpenApiKiotaEndToEndTests.MixedControllers.GeneratedCode.Models.Email"/> and sets the default values.
        /// </summary>
        public Email()
        {
            BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
        }

        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::OpenApiKiotaEndToEndTests.MixedControllers.GeneratedCode.Models.Email"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::OpenApiKiotaEndToEndTests.MixedControllers.GeneratedCode.Models.Email CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::OpenApiKiotaEndToEndTests.MixedControllers.GeneratedCode.Models.Email();
        }

        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "body", n => { Body = n.GetStringValue(); } },
                { "from", n => { From = n.GetStringValue(); } },
                { "sentAtUtc", n => { SentAtUtc = n.GetDateTimeOffsetValue(); } },
                { "subject", n => { Subject = n.GetStringValue(); } },
                { "to", n => { To = n.GetStringValue(); } },
            };
        }

        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("body", Body);
            writer.WriteStringValue("from", From);
            writer.WriteStringValue("subject", Subject);
            writer.WriteStringValue("to", To);
        }
    }
}
#pragma warning restore CS0618
