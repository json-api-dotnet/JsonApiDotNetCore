// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions.Store;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace OpenApiKiotaEndToEndTests.ClientIdGenerationModes.GeneratedCode.Models {
    #pragma warning disable CS1591
    public class RelationshipsInCreatePlayerRequest : IBackedModel, IParsable 
    #pragma warning restore CS1591
    {
        /// <summary>Stores model information.</summary>
        public IBackingStore BackingStore { get; private set; }
        /// <summary>The memberOf property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ToManyPlayerGroupInRequest? MemberOf {
            get { return BackingStore?.Get<ToManyPlayerGroupInRequest?>("memberOf"); }
            set { BackingStore?.Set("memberOf", value); }
        }
#nullable restore
#else
        public ToManyPlayerGroupInRequest MemberOf {
            get { return BackingStore?.Get<ToManyPlayerGroupInRequest>("memberOf"); }
            set { BackingStore?.Set("memberOf", value); }
        }
#endif
        /// <summary>The ownedGames property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ToManyGameInRequest? OwnedGames {
            get { return BackingStore?.Get<ToManyGameInRequest?>("ownedGames"); }
            set { BackingStore?.Set("ownedGames", value); }
        }
#nullable restore
#else
        public ToManyGameInRequest OwnedGames {
            get { return BackingStore?.Get<ToManyGameInRequest>("ownedGames"); }
            set { BackingStore?.Set("ownedGames", value); }
        }
#endif
        /// <summary>
        /// Instantiates a new <see cref="RelationshipsInCreatePlayerRequest"/> and sets the default values.
        /// </summary>
        public RelationshipsInCreatePlayerRequest()
        {
            BackingStore = BackingStoreFactorySingleton.Instance.CreateBackingStore();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="RelationshipsInCreatePlayerRequest"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static RelationshipsInCreatePlayerRequest CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new RelationshipsInCreatePlayerRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"memberOf", n => { MemberOf = n.GetObjectValue<ToManyPlayerGroupInRequest>(ToManyPlayerGroupInRequest.CreateFromDiscriminatorValue); } },
                {"ownedGames", n => { OwnedGames = n.GetObjectValue<ToManyGameInRequest>(ToManyGameInRequest.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<ToManyPlayerGroupInRequest>("memberOf", MemberOf);
            writer.WriteObjectValue<ToManyGameInRequest>("ownedGames", OwnedGames);
        }
    }
}
