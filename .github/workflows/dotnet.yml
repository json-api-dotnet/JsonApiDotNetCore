# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

# TODO: Adapt name
name: .NET

on:
  push:
    # TODO: Include release/* as target
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build-and-test:
    # TODO: Add build matrix
    runs-on: ubuntu-latest
    services:
      postgres:
        # TODO: Can we specify the PostgreSQL version?
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Restore tools
      run: dotnet tool restore
    - name: Restore packages
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore --configuration Release
    - name: Test
      run: dotnet test --no-build --configuration Release --verbosity normal
# TODO: Determine unique version of built NuGet package
# TODO: Upload pre-release NuGet package
# TODO: Build documentation website and publish
# TODO: Push to NuGet on new release

  inspect-code:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Restore tools
      run: dotnet tool restore
    - name: InspectCode
      shell: pwsh
      run: |
        $inspectCodeOutputPath = [System.IO.Path]::Combine([System.IO.Path]::GetTempPath(), 'jetbrains-inspectcode-results.xml')
        echo "INSPECT_CODE_OUTPUT_PATH=$inspectCodeOutputPath" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
        dotnet jb inspectcode JsonApiDotNetCore.sln --build --output="$inspectCodeOutputPath" --profile=WarningSeverities.DotSettings --properties:Configuration=Release --severity=WARNING --verbosity=WARN -dsl=GlobalAll -dsl=GlobalPerProduct -dsl=SolutionPersonal -dsl=ProjectPersonal
    - name: Verify result
      shell: pwsh
      run: |
        [xml]$xml = Get-Content $Env:INSPECT_CODE_OUTPUT_PATH
        if ($xml.report.Issues -and $xml.report.Issues.Project) {
            foreach ($project in $xml.report.Issues.Project) {
                if ($project.Issue.Count -gt 0) {
                    $project.ForEach({
                        Write-Output "`nProject $($project.Name)"
                        $failed = $true

                        $_.Issue.ForEach({
                            $issueType = $xml.report.IssueTypes.SelectSingleNode("IssueType[@Id='$($_.TypeId)']")
                            $severity = $_.Severity ?? $issueType.Severity

                            Write-Output "[$severity] $($_.File):$($_.Line) $($_.TypeId): $($_.Message)"
                        })
                    })
                }
            }

            if ($failed) {
                Write-Error "One or more projects failed code inspection."
                #throw "One or more projects failed code inspection.";
            }
        }
  cleanup-code:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Restore tools
      run: dotnet tool restore
    - name: Restore packages
      run: dotnet restore
    - name: CleanupCode
      run: dotnet regitlint -s JsonApiDotNetCore.sln --print-command --skip-tool-check --max-runs=5 --jb-profile="JADNC Full Cleanup" --jb --properties:Configuration=Release --jb --verbosity=WARN
